=V26.1===================================
npx shadcn@latest add "https://v0.dev/chat/b/b_9OsbM3MVv1x?token=eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..sId44ze9JtTImur1.jap-Krkv7BQVqySb4_63OMNo7uqRO-_aMp0Eakqefkli-hJk2TY92ezxgow.Cw7bCEH5AaKk0CKel0wiNQ"
=V26.1===================================
x Arrange order by item_inspected
x add order button to navigate to order_Page
x order_Page display QRcode for vendor access
x order_Page display the lastest order detailed based on the request_order_number
o Complete submit request order and refresh front page
+++++++++++++++++++++++++++++++++++++++



=V26===================================
npx shadcn@latest add "https://v0.dev/chat/b/b_9OsbM3MVv1x?token=eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..sId44ze9JtTImur1.jap-Krkv7BQVqySb4_63OMNo7uqRO-_aMp0Eakqefkli-hJk2TY92ezxgow.Cw7bCEH5AaKk0CKel0wiNQ"
=V26===================================
-Complete submit request order and refresh front page
+++++++++++++++++++++++++++++++++++++++
'use client';

import { useState, useEffect, useCallback, useRef } from 'react';
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Textarea } from "@/components/ui/textarea";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Separator } from "@/components/ui/separator";
import { Loader2, AlertCircle, CalendarIcon } from 'lucide-react';
import { supabase } from './createClient'; // Assuming you have Supabase setup
import { format, differenceInDays } from 'date-fns';
import { cn } from '@/lib/utils';

type Inspection = {
  inspection_id: number;
  picture_url: string;
  item_inspected: string;
  item_quantity: number;
  unit: string;
  expiry_date: string;
  request_amount: number;
  location: string;
  inspection_date: string;
  inspected_by: string;
  kit_condition: string;
  next_inspection_date: string;
  status: string;
  description: string;
};

const initialDummyData: Inspection[] = []; // Initial data is empty; will be fetched.

const users = ['John Doe', 'Jane Smith', 'Mike Johnson', 'Sarah Lee'];
const statuses = ['Passed', 'Needs Attention', 'Failed'];
const locations = ['Main Office', 'Workshop', 'Reception', 'Gym'];
const units = ['box', 'pack', 'roll', 'piece', 'pair'];

const InspectionService = {
  create: async (newInspection: Inspection) => {
    const { data, error } = await supabase.from('inspections').insert([newInspection]);
    if (error) throw error;
    return data;
  },
  getAll: async () => {
    const { data, error } = await supabase.from('inspections').select('*');
    if (error) throw error;
    return data;
  },
  update: async (inspectionId: number, updatedFields: Partial<Inspection>) => {
    const { data, error } = await supabase.from('inspections').update(updatedFields).eq('inspection_id', inspectionId);
    if (error) throw error;
    return data;
  },
  delete: async (inspectionId: number) => {
    const { data, error } = await supabase.from('inspections').delete().eq('inspection_id', inspectionId);
    if (error) throw error;
    return data;
  },
};

export default function FirstAidInspectionPreview() {
  const [inspections, setInspections] = useState<Inspection[]>(initialDummyData);
  const [filteredInspections, setFilteredInspections] = useState<Inspection[]>(initialDummyData);
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [selectedItem, setSelectedItem] = useState<Inspection | null>(null);
  const [editedItem, setEditedItem] = useState<Inspection | null>(null);
  const [hasChanges, setHasChanges] = useState(false);
  const [requestList, setRequestList] = useState<Inspection[]>([]);
  const [showRequestPopup, setShowRequestPopup] = useState(false);
  const [warningMessage, setWarningMessage] = useState('');
  const dialogContentRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    setIsLoading(true);
    InspectionService.getAll()
      .then((data) => {
        setInspections(data);
        setFilteredInspections(data);
      })
      .catch((error) => console.error('Failed to fetch inspections:', error))
      .finally(() => setIsLoading(false));
  }, []);

  useEffect(() => {
    setFilteredInspections(
      inspections.filter((inspection) =>
        Object.values(inspection).some((value) =>
          value && value.toString().toLowerCase().includes(searchQuery.toLowerCase())
        )
      )
    );
  }, [searchQuery, inspections]);

  const handleRequestAmountChange = (value: string, inspectionId: number) => {
    const updatedInspections = inspections.map((inspection) =>
      inspection.inspection_id === inspectionId ? { ...inspection, request_amount: parseInt(value) } : inspection
    );
    setInspections(updatedInspections);
  };

  const handleRowClick = (inspection: Inspection) => {
    setSelectedItem(inspection);
    setEditedItem(inspection);
    setHasChanges(false);
  };

  const handleInputChange = (name: string, value: string | number) => {
    setEditedItem((prev) => {
      if (!prev) return null;
      const updatedItem = { ...prev, [name]: value };
      setHasChanges(JSON.stringify(updatedItem) !== JSON.stringify(selectedItem));
      return updatedItem;
    });
  };

  const handleDateChange = (name: string, date: Date | undefined) => {
    if (date) {
      handleInputChange(name, format(date, 'yyyy-MM-dd'));
    }
  };

  const handleSave = async () => {
    if (editedItem) {
      setIsLoading(true);
      try {
        await InspectionService.update(editedItem.inspection_id, editedItem);
        setInspections((prevInspections) =>
          prevInspections.map((inspection) => (inspection.inspection_id === editedItem.inspection_id ? editedItem : inspection))
        );
        setSelectedItem(null);
        setEditedItem(null);
        setHasChanges(false);
        setWarningMessage('Changes saved successfully!');
      } catch (error) {
        console.error('Error updating inspection:', error);
        setWarningMessage('Error saving changes. Please try again.');
      } finally {
        setIsLoading(false);
      }
    }
  };

  const handlePreviewRequest = async () => {
    const requests = inspections.filter((inspection) => inspection.request_amount > 0);

    if (requests.length > 0) {
      try {
        setIsLoading(true);

        for (const item of requests) {
          const { error } = await supabase
            .from('inspections')
            .update({ request_amount: item.request_amount })
            .eq('inspection_id', item.inspection_id);
          if (error) throw error;
        }

        setRequestList(requests);
        setShowRequestPopup(true);
        setWarningMessage('');
      } catch (error) {
        console.error('Failed to update request amounts:', error);
        setWarningMessage('Failed to update request amounts. Please try again.');
      } finally {
        setIsLoading(false);
      }
    } else {
      setWarningMessage('Request list is empty. Please add items before previewing.');
      setShowRequestPopup(false);
    }
  };

  const handleSubmitRequest = async () => {
    setIsLoading(true);

    try {
      const { data: latestRequest, error: fetchError } = await supabase
        .from('inspections_request')
        .select('request_order_number')
        .order('request_order_number', { ascending: false })
        .limit(1);

      if (fetchError) throw fetchError;

      let nextRequestNumber = 1;
      if (latestRequest.length > 0 && latestRequest[0].request_order_number) {
        nextRequestNumber = parseInt(latestRequest[0].request_order_number) + 1;
      }

      const formattedRequestNumber = nextRequestNumber.toString().padStart(4, '0');

      const { data: requestData, error: requestError } = await supabase.from('inspections_request').insert(
        requestList.map((item) => ({
          inspection_id: item.inspection_id,
          request_order_number: formattedRequestNumber,
          request_amount: item.request_amount,
          picture_url: item.picture_url, // Include picture URL
          item_inspected: item.item_inspected, // Include inspected item name
          unit: item.unit, // Include unit
          description: item.description, // Include description
        }))
      );

      if (requestError) throw requestError;

      for (const item of requestList) {
        // Directly set `item_quantity` without calculating `updatedQuantity`
        const { error: updateError } = await supabase
          .from('inspections')
          .update({ item_quantity: item.item_quantity, request_amount: 0 }) // Reset request_amount to 0
          .eq('inspection_id', item.inspection_id);
        if (updateError) throw updateError;
      }

      // Refresh the page after the successful request
      window.location.reload();

      setInspections((prevInspections) =>
        prevInspections.map((inspection) => {
          const requestItem = requestList.find((item) => item.inspection_id === inspection.inspection_id);
          if (requestItem) {
            return {
              ...inspection,
              item_quantity: inspection.item_quantity, // Don't adjust item_quantity
              request_amount: 0,
            };
          }
          return inspection;
        })
      );

      console.log('Request successfully submitted:', requestData);
      setShowRequestPopup(false);
      setRequestList([]);
      setWarningMessage('Request submitted successfully and inventory updated!');
    } catch (error) {
      console.error('Failed to submit request or update inventory:', error);
      setWarningMessage('Failed to submit request or update inventory. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const getExpiryDateStyle = useCallback((expiryDate: string) => {
    const today = new Date();
    const expiry = new Date(expiryDate);
    const daysUntilExpiry = differenceInDays(expiry, today);

    if (daysUntilExpiry < 0) return 'bg-red-500 text-white';
    if (daysUntilExpiry <= 90) return 'bg-orange-500 text-white';
    return 'bg-green-500 text-black';
  }, []);

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6 text-center">First Aid Inspection List (Preview)</h1>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Search Inspections</CardTitle>
        </CardHeader>
        <CardContent>
          <Input
            type="text"
            placeholder="Search across all columns..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full"
          />
        </CardContent>
      </Card>

      {warningMessage && (
        <Alert variant={warningMessage.includes('successfully') ? 'default' : 'destructive'} className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Notification</AlertTitle>
          <AlertDescription>{warningMessage}</AlertDescription>
        </Alert>
      )}

      <div className="flex justify-end mb-6">
        <Button onClick={handlePreviewRequest}>Preview Request List</Button>
      </div>

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      ) : (
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="text-center">Item ID</TableHead>
                <TableHead>Picture</TableHead>
                <TableHead>Item Inspected</TableHead>
                <TableHead className="text-center">Item Quantity</TableHead>
                <TableHead>Unit</TableHead>
                <TableHead className="text-center">Expiry Date</TableHead>
                <TableHead>Request Amount</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredInspections.length > 0 ? (
                filteredInspections.map((inspection) => (
                  <TableRow
                    key={inspection.inspection_id}
                    className="cursor-pointer hover:bg-muted transition-colors"
                    onClick={() => handleRowClick(inspection)}
                  >
                    <TableCell className="text-center">{inspection.inspection_id}</TableCell>
                    <TableCell>
                      <img
                        src={inspection.picture_url}
                        alt={inspection.item_inspected}
                        className="w-12 h-12 object-cover rounded"
                      />
                    </TableCell>
                    <TableCell>{inspection.item_inspected}</TableCell>
                    <TableCell className="text-center">{inspection.item_quantity}</TableCell>
                    <TableCell>{inspection.unit}</TableCell>
                    <TableCell className={`${getExpiryDateStyle(inspection.expiry_date)} rounded-md px-2 py-1 text-center`}>
                      {inspection.expiry_date}
                    </TableCell>
                    <TableCell onClick={(e) => e.stopPropagation()}>
                      <Select
                        onValueChange={(value) => handleRequestAmountChange(value, inspection.inspection_id)}
                        defaultValue={inspection.request_amount.toString()}
                      >
                        <SelectTrigger className="w-[100px]">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          {[0, 1, 2, 3, 4, 5].map((amount) => (
                            <SelectItem key={amount} value={amount.toString()}>
                              {amount}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} className="text-center">No matching results found</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      )}

      <Dialog open={showRequestPopup} onOpenChange={setShowRequestPopup}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Request List Preview</DialogTitle>
            <DialogDescription>
              Review the items to be requested below.
            </DialogDescription>
          </DialogHeader>
          <div ref={dialogContentRef} className="grid gap-4 py-4 max-h-[60vh] overflow-y-auto pr-4">
            {requestList.map((item, index) => (
              <div key={item.inspection_id}>
                <div className="grid grid-cols-3 items-center gap-4">
                  <Label htmlFor={`item-${item.inspection_id}`}>{item.item_inspected}</Label>
                  <Input
                    id={`item-${item.inspection_id}`}
                    value={item.request_amount}
                    className="col-span-1"
                    readOnly
                  />
                  <span>{item.unit}</span>
                  <div className="col-span-3">
                    <Label htmlFor={`description-${item.inspection_id}`}>Description</Label>
                    <Textarea
                      id={`description-${item.inspection_id}`}
                      value={item.description}
                      className="mt-1 resize-none bg-transparent"
                      readOnly
                    />
                  </div>
                  <div className="col-span-3 mt-2">
                    <img
                      src={item.picture_url}
                      alt={item.item_inspected}
                      className="w-full h-48 object-cover rounded"
                    />
                  </div>
                </div>
                {index < requestList.length - 1 && <Separator className="my-4" />}
              </div>
            ))}
          </div>
          <DialogFooter>
            <Button onClick={handleSubmitRequest} disabled={isLoading}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Submit Request
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={!!selectedItem} onOpenChange={(open) => {
        if (!open) {
          setSelectedItem(null);
          setEditedItem(null);
          setHasChanges(false);
        }
      }}>
        <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle>Edit Inspection</DialogTitle>
            <DialogDescription>
              Make changes to the inspection details here. Click save when done.
            </DialogDescription>
          </DialogHeader>
          {editedItem && (
            <div className="grid gap-4 py-4">
              <div className="flex justify-center mb-4">
                <img
                  src={editedItem.picture_url}
                  alt={editedItem.item_inspected}
                  className="w-48 h-48 object-cover rounded"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="item_inspected">Item Inspected</Label>
                  <Input
                    id="item_inspected"
                    value={editedItem.item_inspected}
                    onChange={(e) => handleInputChange('item_inspected', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="item_quantity">Item Quantity</Label>
                  <Select
                    value={editedItem.item_quantity.toString()}
                    onValueChange={(value) => handleInputChange('item_quantity', parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select quantity" />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 4, 5, 10, 20, 30, 50].map((quantity) => (
                        <SelectItem key={quantity} value={quantity.toString()}>
                          {quantity}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="unit">Unit</Label>
                  <Select
                    value={editedItem.unit}
                    onValueChange={(value) => handleInputChange('unit', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select unit" />
                    </SelectTrigger>
                    <SelectContent>
                      {units.map((unit) => (
                        <SelectItem key={unit} value={unit}>
                          {unit}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="expiry_date">Expiry Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.expiry_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.expiry_date ? format(new Date(editedItem.expiry_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.expiry_date)}
                        onSelect={(date) => handleDateChange('expiry_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="next_inspection_date">Next Inspection Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.next_inspection_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.next_inspection_date ? format(new Date(editedItem.next_inspection_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.next_inspection_date)}
                        onSelect={(date) => handleDateChange('next_inspection_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="inspected_by">Inspected By</Label>
                  <Select
                    value={editedItem.inspected_by}
                    onValueChange={(value) => handleInputChange('inspected_by', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select inspector" />
                    </SelectTrigger>
                    <SelectContent>
                      {users.map((user) => (
                        <SelectItem key={user} value={user}>
                          {user}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">Status</Label>
                  <Select
                    value={editedItem.status}
                    onValueChange={(value) => handleInputChange('status', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      {statuses.map((status) => (
                        <SelectItem key={status} value={status}>
                          {status}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location">Location</Label>
                  <Select
                    value={editedItem.location}
                    onValueChange={(value) => handleInputChange('location', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select location" />
                    </SelectTrigger>
                    <SelectContent>
                      {locations.map((location) => (
                        <SelectItem key={location} value={location}>
                          {location}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2 col-span-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={editedItem.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    className="resize-none"
                  />
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            {hasChanges ? (
              <>
                <Button onClick={handleSave}>Save changes</Button>
                <Button variant="outline" onClick={() => {
                  setEditedItem(selectedItem);
                  setHasChanges(false);
                }}>
                  Cancel
                </Button>
              </>
            ) : (
              <Button onClick={() => {
                setSelectedItem(null);
                setEditedItem(null);
              }}>
                Close
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}










=V25===================================
npx shadcn@latest add "https://v0.dev/chat/b/b_9OsbM3MVv1x?token=eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..sId44ze9JtTImur1.jap-Krkv7BQVqySb4_63OMNo7uqRO-_aMp0Eakqefkli-hJk2TY92ezxgow.Cw7bCEH5AaKk0CKel0wiNQ"
=V25===================================
-Complete submit order and refresh front page
+++++++++++++++++++++++++++++++++++++++
'use client';

import { useState, useEffect, useCallback, useRef } from 'react';
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Textarea } from "@/components/ui/textarea";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Separator } from "@/components/ui/separator";
import { Loader2, AlertCircle, CalendarIcon } from 'lucide-react';
import { supabase } from './createClient'; // Assuming you have Supabase setup
import { format, differenceInDays } from 'date-fns';
import { cn } from '@/lib/utils';

type Inspection = {
  inspection_id: number;
  picture_url: string;
  item_inspected: string;
  item_quantity: number;
  unit: string;
  expiry_date: string;
  request_amount: number;
  location: string;
  inspection_date: string;
  inspected_by: string;
  kit_condition: string;
  next_inspection_date: string;
  status: string;
  description: string;
};

const initialDummyData: Inspection[] = []; // Initial data is empty; will be fetched.

const users = ['John Doe', 'Jane Smith', 'Mike Johnson', 'Sarah Lee'];
const statuses = ['Passed', 'Needs Attention', 'Failed'];
const locations = ['Main Office', 'Workshop', 'Reception', 'Gym'];
const units = ['box', 'pack', 'roll', 'piece', 'pair'];

const InspectionService = {
  create: async (newInspection: Inspection) => {
    const { data, error } = await supabase.from('inspections').insert([newInspection]);
    if (error) throw error;
    return data;
  },
  getAll: async () => {
    const { data, error } = await supabase.from('inspections').select('*');
    if (error) throw error;
    return data;
  },
  update: async (inspectionId: number, updatedFields: Partial<Inspection>) => {
    const { data, error } = await supabase.from('inspections').update(updatedFields).eq('inspection_id', inspectionId);
    if (error) throw error;
    return data;
  },
  delete: async (inspectionId: number) => {
    const { data, error } = await supabase.from('inspections').delete().eq('inspection_id', inspectionId);
    if (error) throw error;
    return data;
  },
};

export default function FirstAidInspectionPreview() {
  const [inspections, setInspections] = useState<Inspection[]>(initialDummyData);
  const [filteredInspections, setFilteredInspections] = useState<Inspection[]>(initialDummyData);
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [selectedItem, setSelectedItem] = useState<Inspection | null>(null);
  const [editedItem, setEditedItem] = useState<Inspection | null>(null);
  const [hasChanges, setHasChanges] = useState(false);
  const [requestList, setRequestList] = useState<Inspection[]>([]);
  const [showRequestPopup, setShowRequestPopup] = useState(false);
  const [warningMessage, setWarningMessage] = useState('');
  const dialogContentRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    setIsLoading(true);
    InspectionService.getAll()
      .then((data) => {
        setInspections(data);
        setFilteredInspections(data);
      })
      .catch((error) => console.error('Failed to fetch inspections:', error))
      .finally(() => setIsLoading(false));
  }, []);

  useEffect(() => {
    setFilteredInspections(
      inspections.filter((inspection) =>
        Object.values(inspection).some((value) =>
          value && value.toString().toLowerCase().includes(searchQuery.toLowerCase())
        )
      )
    );
  }, [searchQuery, inspections]);

  const handleRequestAmountChange = (value: string, inspectionId: number) => {
    const updatedInspections = inspections.map((inspection) =>
      inspection.inspection_id === inspectionId ? { ...inspection, request_amount: parseInt(value) } : inspection
    );
    setInspections(updatedInspections);
  };

  const handleRowClick = (inspection: Inspection) => {
    setSelectedItem(inspection);
    setEditedItem(inspection);
    setHasChanges(false);
  };

  const handleInputChange = (name: string, value: string | number) => {
    setEditedItem((prev) => {
      if (!prev) return null;
      const updatedItem = { ...prev, [name]: value };
      setHasChanges(JSON.stringify(updatedItem) !== JSON.stringify(selectedItem));
      return updatedItem;
    });
  };

  const handleDateChange = (name: string, date: Date | undefined) => {
    if (date) {
      handleInputChange(name, format(date, 'yyyy-MM-dd'));
    }
  };

  const handleSave = async () => {
    if (editedItem) {
      setIsLoading(true);
      try {
        await InspectionService.update(editedItem.inspection_id, editedItem);
        setInspections((prevInspections) =>
          prevInspections.map((inspection) => (inspection.inspection_id === editedItem.inspection_id ? editedItem : inspection))
        );
        setSelectedItem(null);
        setEditedItem(null);
        setHasChanges(false);
        setWarningMessage('Changes saved successfully!');
      } catch (error) {
        console.error('Error updating inspection:', error);
        setWarningMessage('Error saving changes. Please try again.');
      } finally {
        setIsLoading(false);
      }
    }
  };

  const handlePreviewRequest = async () => {
    const requests = inspections.filter((inspection) => inspection.request_amount > 0);

    if (requests.length > 0) {
      try {
        setIsLoading(true);

        for (const item of requests) {
          const { error } = await supabase
            .from('inspections')
            .update({ request_amount: item.request_amount })
            .eq('inspection_id', item.inspection_id);
          if (error) throw error;
        }

        setRequestList(requests);
        setShowRequestPopup(true);
        setWarningMessage('');
      } catch (error) {
        console.error('Failed to update request amounts:', error);
        setWarningMessage('Failed to update request amounts. Please try again.');
      } finally {
        setIsLoading(false);
      }
    } else {
      setWarningMessage('Request list is empty. Please add items before previewing.');
      setShowRequestPopup(false);
    }
  };

  const handleSubmitRequest = async () => {
    setIsLoading(true);

    try {
      const { data: latestRequest, error: fetchError } = await supabase
        .from('inspections_request')
        .select('request_order_number')
        .order('request_order_number', { ascending: false })
        .limit(1);

      if (fetchError) throw fetchError;

      let nextRequestNumber = 1;
      if (latestRequest.length > 0 && latestRequest[0].request_order_number) {
        nextRequestNumber = parseInt(latestRequest[0].request_order_number) + 1;
      }

      const formattedRequestNumber = nextRequestNumber.toString().padStart(4, '0');

      const { data: requestData, error: requestError } = await supabase.from('inspections_request').insert(
        requestList.map((item) => ({
          inspection_id: item.inspection_id,
          request_order_number: formattedRequestNumber,
          request_amount: item.request_amount,
          picture_url: item.picture_url, // Include picture URL
          item_inspected: item.item_inspected, // Include inspected item name
          unit: item.unit, // Include unit
          description: item.description, // Include description
        }))
      );

      if (requestError) throw requestError;

      for (const item of requestList) {
        // Directly set `item_quantity` without calculating `updatedQuantity`
        const { error: updateError } = await supabase
          .from('inspections')
          .update({ item_quantity: item.item_quantity, request_amount: 0 }) // Reset request_amount to 0
          .eq('inspection_id', item.inspection_id);
        if (updateError) throw updateError;
      }

      // Refresh the page after the successful request
      window.location.reload();

      setInspections((prevInspections) =>
        prevInspections.map((inspection) => {
          const requestItem = requestList.find((item) => item.inspection_id === inspection.inspection_id);
          if (requestItem) {
            return {
              ...inspection,
              item_quantity: inspection.item_quantity, // Don't adjust item_quantity
              request_amount: 0,
            };
          }
          return inspection;
        })
      );

      console.log('Request successfully submitted:', requestData);
      setShowRequestPopup(false);
      setRequestList([]);
      setWarningMessage('Request submitted successfully and inventory updated!');
    } catch (error) {
      console.error('Failed to submit request or update inventory:', error);
      setWarningMessage('Failed to submit request or update inventory. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const getExpiryDateStyle = useCallback((expiryDate: string) => {
    const today = new Date();
    const expiry = new Date(expiryDate);
    const daysUntilExpiry = differenceInDays(expiry, today);

    if (daysUntilExpiry < 0) return 'bg-red-500 text-white';
    if (daysUntilExpiry <= 90) return 'bg-orange-500 text-white';
    return 'bg-green-500 text-black';
  }, []);

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6 text-center">First Aid Inspection List (Preview)</h1>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Search Inspections</CardTitle>
        </CardHeader>
        <CardContent>
          <Input
            type="text"
            placeholder="Search across all columns..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full"
          />
        </CardContent>
      </Card>

      {warningMessage && (
        <Alert variant={warningMessage.includes('successfully') ? 'default' : 'destructive'} className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Notification</AlertTitle>
          <AlertDescription>{warningMessage}</AlertDescription>
        </Alert>
      )}

      <div className="flex justify-end mb-6">
        <Button onClick={handlePreviewRequest}>Preview Request List</Button>
      </div>

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      ) : (
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="text-center">Item ID</TableHead>
                <TableHead>Picture</TableHead>
                <TableHead>Item Inspected</TableHead>
                <TableHead className="text-center">Item Quantity</TableHead>
                <TableHead>Unit</TableHead>
                <TableHead className="text-center">Expiry Date</TableHead>
                <TableHead>Request Amount</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredInspections.length > 0 ? (
                filteredInspections.map((inspection) => (
                  <TableRow
                    key={inspection.inspection_id}
                    className="cursor-pointer hover:bg-muted transition-colors"
                    onClick={() => handleRowClick(inspection)}
                  >
                    <TableCell className="text-center">{inspection.inspection_id}</TableCell>
                    <TableCell>
                      <img
                        src={inspection.picture_url}
                        alt={inspection.item_inspected}
                        className="w-12 h-12 object-cover rounded"
                      />
                    </TableCell>
                    <TableCell>{inspection.item_inspected}</TableCell>
                    <TableCell className="text-center">{inspection.item_quantity}</TableCell>
                    <TableCell>{inspection.unit}</TableCell>
                    <TableCell className={`${getExpiryDateStyle(inspection.expiry_date)} rounded-md px-2 py-1 text-center`}>
                      {inspection.expiry_date}
                    </TableCell>
                    <TableCell onClick={(e) => e.stopPropagation()}>
                      <Select
                        onValueChange={(value) => handleRequestAmountChange(value, inspection.inspection_id)}
                        defaultValue={inspection.request_amount.toString()}
                      >
                        <SelectTrigger className="w-[100px]">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          {[0, 1, 2, 3, 4, 5].map((amount) => (
                            <SelectItem key={amount} value={amount.toString()}>
                              {amount}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} className="text-center">No matching results found</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      )}

      <Dialog open={showRequestPopup} onOpenChange={setShowRequestPopup}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Request List Preview</DialogTitle>
            <DialogDescription>
              Review the items to be requested below.
            </DialogDescription>
          </DialogHeader>
          <div ref={dialogContentRef} className="grid gap-4 py-4 max-h-[60vh] overflow-y-auto pr-4">
            {requestList.map((item, index) => (
              <div key={item.inspection_id}>
                <div className="grid grid-cols-3 items-center gap-4">
                  <Label htmlFor={`item-${item.inspection_id}`}>{item.item_inspected}</Label>
                  <Input
                    id={`item-${item.inspection_id}`}
                    value={item.request_amount}
                    className="col-span-1"
                    readOnly
                  />
                  <span>{item.unit}</span>
                  <div className="col-span-3">
                    <Label htmlFor={`description-${item.inspection_id}`}>Description</Label>
                    <Textarea
                      id={`description-${item.inspection_id}`}
                      value={item.description}
                      className="mt-1 resize-none bg-transparent"
                      readOnly
                    />
                  </div>
                  <div className="col-span-3 mt-2">
                    <img
                      src={item.picture_url}
                      alt={item.item_inspected}
                      className="w-full h-48 object-cover rounded"
                    />
                  </div>
                </div>
                {index < requestList.length - 1 && <Separator className="my-4" />}
              </div>
            ))}
          </div>
          <DialogFooter>
            <Button onClick={handleSubmitRequest} disabled={isLoading}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Submit Request
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={!!selectedItem} onOpenChange={(open) => {
        if (!open) {
          setSelectedItem(null);
          setEditedItem(null);
          setHasChanges(false);
        }
      }}>
        <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle>Edit Inspection</DialogTitle>
            <DialogDescription>
              Make changes to the inspection details here. Click save when done.
            </DialogDescription>
          </DialogHeader>
          {editedItem && (
            <div className="grid gap-4 py-4">
              <div className="flex justify-center mb-4">
                <img
                  src={editedItem.picture_url}
                  alt={editedItem.item_inspected}
                  className="w-48 h-48 object-cover rounded"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="item_inspected">Item Inspected</Label>
                  <Input
                    id="item_inspected"
                    value={editedItem.item_inspected}
                    onChange={(e) => handleInputChange('item_inspected', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="item_quantity">Item Quantity</Label>
                  <Select
                    value={editedItem.item_quantity.toString()}
                    onValueChange={(value) => handleInputChange('item_quantity', parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select quantity" />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 4, 5, 10, 20, 30, 50].map((quantity) => (
                        <SelectItem key={quantity} value={quantity.toString()}>
                          {quantity}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="unit">Unit</Label>
                  <Select
                    value={editedItem.unit}
                    onValueChange={(value) => handleInputChange('unit', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select unit" />
                    </SelectTrigger>
                    <SelectContent>
                      {units.map((unit) => (
                        <SelectItem key={unit} value={unit}>
                          {unit}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="expiry_date">Expiry Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.expiry_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.expiry_date ? format(new Date(editedItem.expiry_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.expiry_date)}
                        onSelect={(date) => handleDateChange('expiry_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="next_inspection_date">Next Inspection Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.next_inspection_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.next_inspection_date ? format(new Date(editedItem.next_inspection_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.next_inspection_date)}
                        onSelect={(date) => handleDateChange('next_inspection_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="inspected_by">Inspected By</Label>
                  <Select
                    value={editedItem.inspected_by}
                    onValueChange={(value) => handleInputChange('inspected_by', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select inspector" />
                    </SelectTrigger>
                    <SelectContent>
                      {users.map((user) => (
                        <SelectItem key={user} value={user}>
                          {user}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">Status</Label>
                  <Select
                    value={editedItem.status}
                    onValueChange={(value) => handleInputChange('status', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      {statuses.map((status) => (
                        <SelectItem key={status} value={status}>
                          {status}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location">Location</Label>
                  <Select
                    value={editedItem.location}
                    onValueChange={(value) => handleInputChange('location', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select location" />
                    </SelectTrigger>
                    <SelectContent>
                      {locations.map((location) => (
                        <SelectItem key={location} value={location}>
                          {location}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2 col-span-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={editedItem.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    className="resize-none"
                  />
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            {hasChanges ? (
              <>
                <Button onClick={handleSave}>Save changes</Button>
                <Button variant="outline" onClick={() => {
                  setEditedItem(selectedItem);
                  setHasChanges(false);
                }}>
                  Cancel
                </Button>
              </>
            ) : (
              <Button onClick={() => {
                setSelectedItem(null);
                setEditedItem(null);
              }}>
                Close
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}








=V24.1===================================
npx shadcn@latest add "https://v0.dev/chat/b/b_9OsbM3MVv1x?token=eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..sId44ze9JtTImur1.jap-Krkv7BQVqySb4_63OMNo7uqRO-_aMp0Eakqefkli-hJk2TY92ezxgow.Cw7bCEH5AaKk0CKel0wiNQ"
=V24.1===================================
-Reset request_amount to 0 if submit the order successfully
-Complete submit order to table: inspection_request
+++++++++++++++++++++++++++++++++++++++

'use client';

import { useState, useEffect, useCallback, useRef } from 'react';
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Textarea } from "@/components/ui/textarea";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Separator } from "@/components/ui/separator";
import { Loader2, AlertCircle, CalendarIcon } from 'lucide-react';
import { supabase } from './createClient'; // Assuming you have Supabase setup
import { format, differenceInDays } from 'date-fns';
import { cn } from '@/lib/utils';

type Inspection = {
  inspection_id: number;
  picture_url: string;
  item_inspected: string;
  item_quantity: number;
  unit: string;
  expiry_date: string;
  request_amount: number;
  location: string;
  inspection_date: string;
  inspected_by: string;
  kit_condition: string;
  next_inspection_date: string;
  status: string;
  description: string;
};

const initialDummyData: Inspection[] = []; // Initial data is empty; will be fetched.

const users = ['John Doe', 'Jane Smith', 'Mike Johnson', 'Sarah Lee'];
const statuses = ['Passed', 'Needs Attention', 'Failed'];
const locations = ['Main Office', 'Workshop', 'Reception', 'Gym'];
const units = ['box', 'pack', 'roll', 'piece', 'pair'];

const InspectionService = {
  create: async (newInspection: Inspection) => {
    const { data, error } = await supabase.from('inspections').insert([newInspection]);
    if (error) throw error;
    return data;
  },
  getAll: async () => {
    const { data, error } = await supabase.from('inspections').select('*');
    if (error) throw error;
    return data;
  },
  update: async (inspectionId: number, updatedFields: Partial<Inspection>) => {
    const { data, error } = await supabase.from('inspections').update(updatedFields).eq('inspection_id', inspectionId);
    if (error) throw error;
    return data;
  },
  delete: async (inspectionId: number) => {
    const { data, error } = await supabase.from('inspections').delete().eq('inspection_id', inspectionId);
    if (error) throw error;
    return data;
  },
};

export default function FirstAidInspectionPreview() {
  const [inspections, setInspections] = useState<Inspection[]>(initialDummyData);
  const [filteredInspections, setFilteredInspections] = useState<Inspection[]>(initialDummyData);
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [selectedItem, setSelectedItem] = useState<Inspection | null>(null);
  const [editedItem, setEditedItem] = useState<Inspection | null>(null);
  const [hasChanges, setHasChanges] = useState(false);
  const [requestList, setRequestList] = useState<Inspection[]>([]);
  const [showRequestPopup, setShowRequestPopup] = useState(false);
  const [warningMessage, setWarningMessage] = useState('');
  const dialogContentRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    setIsLoading(true);
    InspectionService.getAll()
      .then((data) => {
        setInspections(data);
        setFilteredInspections(data);
      })
      .catch((error) => console.error('Failed to fetch inspections:', error))
      .finally(() => setIsLoading(false));
  }, []);

  useEffect(() => {
    setFilteredInspections(
      inspections.filter((inspection) =>
        Object.values(inspection).some((value) =>
          value && value.toString().toLowerCase().includes(searchQuery.toLowerCase())
        )
      )
    );
  }, [searchQuery, inspections]);

  const handleRequestAmountChange = (value: string, inspectionId: number) => {
    const updatedInspections = inspections.map((inspection) =>
      inspection.inspection_id === inspectionId ? { ...inspection, request_amount: parseInt(value) } : inspection
    );
    setInspections(updatedInspections);
  };

  const handleRowClick = (inspection: Inspection) => {
    setSelectedItem(inspection);
    setEditedItem(inspection);
    setHasChanges(false);
  };

  const handleInputChange = (name: string, value: string | number) => {
    setEditedItem((prev) => {
      if (!prev) return null;
      const updatedItem = { ...prev, [name]: value };
      setHasChanges(JSON.stringify(updatedItem) !== JSON.stringify(selectedItem));
      return updatedItem;
    });
  };

  const handleDateChange = (name: string, date: Date | undefined) => {
    if (date) {
      handleInputChange(name, format(date, 'yyyy-MM-dd'));
    }
  };

  const handleSave = async () => {
    if (editedItem) {
      setIsLoading(true);
      try {
        await InspectionService.update(editedItem.inspection_id, editedItem);
        setInspections((prevInspections) =>
          prevInspections.map((inspection) => (inspection.inspection_id === editedItem.inspection_id ? editedItem : inspection))
        );
        setSelectedItem(null);
        setEditedItem(null);
        setHasChanges(false);
        setWarningMessage('Changes saved successfully!');
      } catch (error) {
        console.error('Error updating inspection:', error);
        setWarningMessage('Error saving changes. Please try again.');
      } finally {
        setIsLoading(false);
      }
    }
  };

  const handlePreviewRequest = async () => {
    const requests = inspections.filter((inspection) => inspection.request_amount > 0);

    if (requests.length > 0) {
      try {
        setIsLoading(true);

        for (const item of requests) {
          const { error } = await supabase
            .from('inspections')
            .update({ request_amount: item.request_amount })
            .eq('inspection_id', item.inspection_id);
          if (error) throw error;
        }

        setRequestList(requests);
        setShowRequestPopup(true);
        setWarningMessage('');
      } catch (error) {
        console.error('Failed to update request amounts:', error);
        setWarningMessage('Failed to update request amounts. Please try again.');
      } finally {
        setIsLoading(false);
      }
    } else {
      setWarningMessage('Request list is empty. Please add items before previewing.');
      setShowRequestPopup(false);
    }
  };

  const handleSubmitRequest = async () => {
    setIsLoading(true);

    try {
      const { data: latestRequest, error: fetchError } = await supabase
        .from('inspections_request')
        .select('request_order_number')
        .order('request_order_number', { ascending: false })
        .limit(1);

      if (fetchError) throw fetchError;

      let nextRequestNumber = 1;
      if (latestRequest.length > 0 && latestRequest[0].request_order_number) {
        nextRequestNumber = parseInt(latestRequest[0].request_order_number) + 1;
      }

      const formattedRequestNumber = nextRequestNumber.toString().padStart(4, '0');

      const { data: requestData, error: requestError } = await supabase.from('inspections_request').insert(
        requestList.map((item) => ({
          inspection_id: item.inspection_id,
          request_order_number: formattedRequestNumber,
          request_amount: item.request_amount,
          picture_url: item.picture_url, // Include picture URL
          item_inspected: item.item_inspected, // Include inspected item name
          unit: item.unit, // Include unit
          description: item.description, // Include description
        }))
      );

      if (requestError) throw requestError;

      for (const item of requestList) {
        const updatedQuantity = item.item_quantity - item.request_amount;

        // Update the item_quantity and reset request_amount to 0
        const { error: updateError } = await supabase
          .from('inspections')
          .update({ item_quantity: updatedQuantity, request_amount: 0 }) // Reset request_amount to 0
          .eq('inspection_id', item.inspection_id);
        if (updateError) throw updateError;
      }

      // Refresh the page after the successful request
      window.location.reload();

      setInspections((prevInspections) =>
        prevInspections.map((inspection) => {
          const requestItem = requestList.find((item) => item.inspection_id === inspection.inspection_id);
          if (requestItem) {
            return {
              ...inspection,
              item_quantity: inspection.item_quantity - requestItem.request_amount,
              request_amount: 0,
            };
          }
          return inspection;
        })
      );

      console.log('Request successfully submitted:', requestData);
      setShowRequestPopup(false);
      setRequestList([]);
      setWarningMessage('Request submitted successfully and inventory updated!');
    } catch (error) {
      console.error('Failed to submit request or update inventory:', error);
      setWarningMessage('Failed to submit request or update inventory. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const getExpiryDateStyle = useCallback((expiryDate: string) => {
    const today = new Date();
    const expiry = new Date(expiryDate);
    const daysUntilExpiry = differenceInDays(expiry, today);

    if (daysUntilExpiry < 0) return 'bg-red-500 text-white';
    if (daysUntilExpiry <= 90) return 'bg-orange-500 text-white';
    return 'bg-green-500 text-black';
  }, []);

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6 text-center">First Aid Inspection List (Preview)</h1>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Search Inspections</CardTitle>
        </CardHeader>
        <CardContent>
          <Input
            type="text"
            placeholder="Search across all columns..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full"
          />
        </CardContent>
      </Card>

      {warningMessage && (
        <Alert variant={warningMessage.includes('successfully') ? 'default' : 'destructive'} className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Notification</AlertTitle>
          <AlertDescription>{warningMessage}</AlertDescription>
        </Alert>
      )}

      <div className="flex justify-end mb-6">
        <Button onClick={handlePreviewRequest}>Preview Request List</Button>
      </div>

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      ) : (
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="text-center">Item ID</TableHead>
                <TableHead>Picture</TableHead>
                <TableHead>Item Inspected</TableHead>
                <TableHead className="text-center">Item Quantity</TableHead>
                <TableHead>Unit</TableHead>
                <TableHead className="text-center">Expiry Date</TableHead>
                <TableHead>Request Amount</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredInspections.length > 0 ? (
                filteredInspections.map((inspection) => (
                  <TableRow
                    key={inspection.inspection_id}
                    className="cursor-pointer hover:bg-muted transition-colors"
                    onClick={() => handleRowClick(inspection)}
                  >
                    <TableCell className="text-center">{inspection.inspection_id}</TableCell>
                    <TableCell>
                      <img
                        src={inspection.picture_url}
                        alt={inspection.item_inspected}
                        className="w-12 h-12 object-cover rounded"
                      />
                    </TableCell>
                    <TableCell>{inspection.item_inspected}</TableCell>
                    <TableCell className="text-center">{inspection.item_quantity}</TableCell>
                    <TableCell>{inspection.unit}</TableCell>
                    <TableCell className={`${getExpiryDateStyle(inspection.expiry_date)} rounded-md px-2 py-1 text-center`}>
                      {inspection.expiry_date}
                    </TableCell>
                    <TableCell onClick={(e) => e.stopPropagation()}>
                      <Select
                        onValueChange={(value) => handleRequestAmountChange(value, inspection.inspection_id)}
                        defaultValue={inspection.request_amount.toString()}
                      >
                        <SelectTrigger className="w-[100px]">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          {[0, 1, 2, 3, 4, 5].map((amount) => (
                            <SelectItem key={amount} value={amount.toString()}>
                              {amount}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} className="text-center">No matching results found</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      )}

      <Dialog open={showRequestPopup} onOpenChange={setShowRequestPopup}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Request List Preview</DialogTitle>
            <DialogDescription>
              Review the items to be requested below.
            </DialogDescription>
          </DialogHeader>
          <div ref={dialogContentRef} className="grid gap-4 py-4 max-h-[60vh] overflow-y-auto pr-4">
            {requestList.map((item, index) => (
              <div key={item.inspection_id}>
                <div className="grid grid-cols-3 items-center gap-4">
                  <Label htmlFor={`item-${item.inspection_id}`}>{item.item_inspected}</Label>
                  <Input
                    id={`item-${item.inspection_id}`}
                    value={item.request_amount}
                    className="col-span-1"
                    readOnly
                  />
                  <span>{item.unit}</span>
                  <div className="col-span-3">
                    <Label htmlFor={`description-${item.inspection_id}`}>Description</Label>
                    <Textarea
                      id={`description-${item.inspection_id}`}
                      value={item.description}
                      className="mt-1 resize-none bg-transparent"
                      readOnly
                    />
                  </div>
                  <div className="col-span-3 mt-2">
                    <img
                      src={item.picture_url}
                      alt={item.item_inspected}
                      className="w-full h-48 object-cover rounded"
                    />
                  </div>
                </div>
                {index < requestList.length - 1 && <Separator className="my-4" />}
              </div>
            ))}
          </div>
          <DialogFooter>
            <Button onClick={handleSubmitRequest} disabled={isLoading}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Submit Request
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={!!selectedItem} onOpenChange={(open) => {
        if (!open) {
          setSelectedItem(null);
          setEditedItem(null);
          setHasChanges(false);
        }
      }}>
        <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle>Edit Inspection</DialogTitle>
            <DialogDescription>
              Make changes to the inspection details here. Click save when done.
            </DialogDescription>
          </DialogHeader>
          {editedItem && (
            <div className="grid gap-4 py-4">
              <div className="flex justify-center mb-4">
                <img
                  src={editedItem.picture_url}
                  alt={editedItem.item_inspected}
                  className="w-48 h-48 object-cover rounded"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="item_inspected">Item Inspected</Label>
                  <Input
                    id="item_inspected"
                    value={editedItem.item_inspected}
                    onChange={(e) => handleInputChange('item_inspected', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="item_quantity">Item Quantity</Label>
                  <Select
                    value={editedItem.item_quantity.toString()}
                    onValueChange={(value) => handleInputChange('item_quantity', parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select quantity" />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 4, 5, 10, 20, 30, 50].map((quantity) => (
                        <SelectItem key={quantity} value={quantity.toString()}>
                          {quantity}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="unit">Unit</Label>
                  <Select
                    value={editedItem.unit}
                    onValueChange={(value) => handleInputChange('unit', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select unit" />
                    </SelectTrigger>
                    <SelectContent>
                      {units.map((unit) => (
                        <SelectItem key={unit} value={unit}>
                          {unit}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="expiry_date">Expiry Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.expiry_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.expiry_date ? format(new Date(editedItem.expiry_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.expiry_date)}
                        onSelect={(date) => handleDateChange('expiry_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="next_inspection_date">Next Inspection Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.next_inspection_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.next_inspection_date ? format(new Date(editedItem.next_inspection_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.next_inspection_date)}
                        onSelect={(date) => handleDateChange('next_inspection_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="inspected_by">Inspected By</Label>
                  <Select
                    value={editedItem.inspected_by}
                    onValueChange={(value) => handleInputChange('inspected_by', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select inspector" />
                    </SelectTrigger>
                    <SelectContent>
                      {users.map((user) => (
                        <SelectItem key={user} value={user}>
                          {user}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">Status</Label>
                  <Select
                    value={editedItem.status}
                    onValueChange={(value) => handleInputChange('status', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      {statuses.map((status) => (
                        <SelectItem key={status} value={status}>
                          {status}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location">Location</Label>
                  <Select
                    value={editedItem.location}
                    onValueChange={(value) => handleInputChange('location', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select location" />
                    </SelectTrigger>
                    <SelectContent>
                      {locations.map((location) => (
                        <SelectItem key={location} value={location}>
                          {location}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2 col-span-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={editedItem.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    className="resize-none"
                  />
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            {hasChanges ? (
              <>
                <Button onClick={handleSave}>Save changes</Button>
                <Button variant="outline" onClick={() => {
                  setEditedItem(selectedItem);
                  setHasChanges(false);
                }}>
                  Cancel
                </Button>
              </>
            ) : (
              <Button onClick={() => {
                setSelectedItem(null);
                setEditedItem(null);
              }}>
                Close
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}



















=V24===================================
npx shadcn@latest add "https://v0.dev/chat/b/b_9OsbM3MVv1x?token=eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..sId44ze9JtTImur1.jap-Krkv7BQVqySb4_63OMNo7uqRO-_aMp0Eakqefkli-hJk2TY92ezxgow.Cw7bCEH5AaKk0CKel0wiNQ"
=V24===================================
-Complete submit order to table: inspection_request
+++++++++++++++++++++++++++++++++++++++
'use client';

import { useState, useEffect, useCallback, useRef } from 'react';
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Textarea } from "@/components/ui/textarea";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Separator } from "@/components/ui/separator";
import { Loader2, AlertCircle, CalendarIcon } from 'lucide-react';
import { supabase } from './createClient'; // Assuming you have Supabase setup
import { format, differenceInDays } from 'date-fns';
import { cn } from '@/lib/utils';

type Inspection = {
  inspection_id: number;
  picture_url: string;
  item_inspected: string;
  item_quantity: number;
  unit: string;
  expiry_date: string;
  request_amount: number;
  location: string;
  inspection_date: string;
  inspected_by: string;
  kit_condition: string;
  next_inspection_date: string;
  status: string;
  description: string;
};

const initialDummyData: Inspection[] = []; // Initial data is empty; will be fetched.

const users = ['John Doe', 'Jane Smith', 'Mike Johnson', 'Sarah Lee'];
const statuses = ['Passed', 'Needs Attention', 'Failed'];
const locations = ['Main Office', 'Workshop', 'Reception', 'Gym'];
const units = ['box', 'pack', 'roll', 'piece', 'pair'];

// Centralized CRUD operations
const InspectionService = {
  create: async (newInspection: Inspection) => {
    const { data, error } = await supabase.from('inspections').insert([newInspection]);
    if (error) throw error;
    return data;
  },
  getAll: async () => {
    const { data, error } = await supabase.from('inspections').select('*');
    if (error) throw error;
    return data;
  },
  update: async (inspectionId: number, updatedFields: Partial<Inspection>) => {
    const { data, error } = await supabase.from('inspections').update(updatedFields).eq('inspection_id', inspectionId);
    if (error) throw error;
    return data;
  },
  delete: async (inspectionId: number) => {
    const { data, error } = await supabase.from('inspections').delete().eq('inspection_id', inspectionId);
    if (error) throw error;
    return data;
  },
};

export default function FirstAidInspectionPreview() {
  const [inspections, setInspections] = useState<Inspection[]>(initialDummyData);
  const [filteredInspections, setFilteredInspections] = useState<Inspection[]>(initialDummyData);
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [selectedItem, setSelectedItem] = useState<Inspection | null>(null);
  const [editedItem, setEditedItem] = useState<Inspection | null>(null);
  const [hasChanges, setHasChanges] = useState(false);
  const [requestList, setRequestList] = useState<Inspection[]>([]);
  const [showRequestPopup, setShowRequestPopup] = useState(false);
  const [warningMessage, setWarningMessage] = useState('');
  const dialogContentRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    setIsLoading(true);
    InspectionService.getAll()
      .then((data) => {
        setInspections(data);
        setFilteredInspections(data);
      })
      .catch((error) => console.error('Failed to fetch inspections:', error))
      .finally(() => setIsLoading(false));
  }, []);

  useEffect(() => {
    setFilteredInspections(
      inspections.filter((inspection) =>
        Object.values(inspection).some((value) =>
          value && value.toString().toLowerCase().includes(searchQuery.toLowerCase())
        )
      )
    );
  }, [searchQuery, inspections]);

  const handleRequestAmountChange = (value: string, inspectionId: number) => {
    const updatedInspections = inspections.map((inspection) =>
      inspection.inspection_id === inspectionId ? { ...inspection, request_amount: parseInt(value) } : inspection
    );
    setInspections(updatedInspections);
  };

  const handleRowClick = (inspection: Inspection) => {
    setSelectedItem(inspection);
    setEditedItem(inspection);
    setHasChanges(false);
  };

  const handleInputChange = (name: string, value: string | number) => {
    setEditedItem((prev) => {
      if (!prev) return null;
      const updatedItem = { ...prev, [name]: value };
      setHasChanges(JSON.stringify(updatedItem) !== JSON.stringify(selectedItem));
      return updatedItem;
    });
  };

  const handleDateChange = (name: string, date: Date | undefined) => {
    if (date) {
      handleInputChange(name, format(date, 'yyyy-MM-dd'));
    }
  };

  const handleSave = async () => {
    if (editedItem) {
      setIsLoading(true);
      try {
        await InspectionService.update(editedItem.inspection_id, editedItem);
        setInspections((prevInspections) =>
          prevInspections.map((inspection) => (inspection.inspection_id === editedItem.inspection_id ? editedItem : inspection))
        );
        setSelectedItem(null);
        setEditedItem(null);
        setHasChanges(false);
        setWarningMessage('Changes saved successfully!');
      } catch (error) {
        console.error('Error updating inspection:', error);
        setWarningMessage('Error saving changes. Please try again.');
      } finally {
        setIsLoading(false);
      }
    }
  };

  const handlePreviewRequest = async () => {
    const requests = inspections.filter((inspection) => inspection.request_amount > 0);

    if (requests.length > 0) {
      try {
        setIsLoading(true);

        for (const item of requests) {
          const { error } = await supabase
            .from('inspections')
            .update({ request_amount: item.request_amount })
            .eq('inspection_id', item.inspection_id);
          if (error) throw error;
        }

        setRequestList(requests);
        setShowRequestPopup(true);
        setWarningMessage('');
      } catch (error) {
        console.error('Failed to update request amounts:', error);
        setWarningMessage('Failed to update request amounts. Please try again.');
      } finally {
        setIsLoading(false);
      }
    } else {
      setWarningMessage('Request list is empty. Please add items before previewing.');
      setShowRequestPopup(false);
    }
  };

  const handleSubmitRequest = async () => {
    setIsLoading(true);

    try {
      const { data: latestRequest, error: fetchError } = await supabase
        .from('inspections_request')
        .select('request_order_number')
        .order('request_order_number', { ascending: false })
        .limit(1);

      if (fetchError) throw fetchError;

      let nextRequestNumber = 1;
      if (latestRequest.length > 0 && latestRequest[0].request_order_number) {
        nextRequestNumber = parseInt(latestRequest[0].request_order_number) + 1;
      }

      const formattedRequestNumber = nextRequestNumber.toString().padStart(4, '0');

      const { data: requestData, error: requestError } = await supabase.from('inspections_request').insert(
        requestList.map((item) => ({
          inspection_id: item.inspection_id,
          request_order_number: formattedRequestNumber,
          request_amount: item.request_amount,
          picture_url: item.picture_url, // Include picture URL
          item_inspected: item.item_inspected, // Include inspected item name
          unit: item.unit, // Include unit
          description: item.description, // Include description
        }))
      );

      if (requestError) throw requestError;

      for (const item of requestList) {
        const updatedQuantity = item.item_quantity - item.request_amount;
        const { error: updateError } = await supabase
          .from('inspections')
          .update({ item_quantity: updatedQuantity })
          .eq('inspection_id', item.inspection_id);
        if (updateError) throw updateError;
      }

      setInspections((prevInspections) =>
        prevInspections.map((inspection) => {
          const requestItem = requestList.find((item) => item.inspection_id === inspection.inspection_id);
          if (requestItem) {
            return {
              ...inspection,
              item_quantity: inspection.item_quantity - requestItem.request_amount,
              request_amount: 0,
            };
          }
          return inspection;
        })
      );

      console.log('Request successfully submitted:', requestData);
      setShowRequestPopup(false);
      setRequestList([]);
      setWarningMessage('Request submitted successfully and inventory updated!');
    } catch (error) {
      console.error('Failed to submit request or update inventory:', error);
      setWarningMessage('Failed to submit request or update inventory. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const getExpiryDateStyle = useCallback((expiryDate: string) => {
    const today = new Date();
    const expiry = new Date(expiryDate);
    const daysUntilExpiry = differenceInDays(expiry, today);

    if (daysUntilExpiry < 0) return 'bg-red-500 text-white';
    if (daysUntilExpiry <= 90) return 'bg-orange-500 text-white';
    return 'bg-green-500 text-black';
  }, []);

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6 text-center">First Aid Inspection List (Preview)</h1>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Search Inspections</CardTitle>
        </CardHeader>
        <CardContent>
          <Input
            type="text"
            placeholder="Search across all columns..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full"
          />
        </CardContent>
      </Card>

      {warningMessage && (
        <Alert variant={warningMessage.includes('successfully') ? 'default' : 'destructive'} className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Notification</AlertTitle>
          <AlertDescription>{warningMessage}</AlertDescription>
        </Alert>
      )}

      <div className="flex justify-end mb-6">
        <Button onClick={handlePreviewRequest}>Preview Request List</Button>
      </div>

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      ) : (
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="text-center">Item ID</TableHead>
                <TableHead>Picture</TableHead>
                <TableHead>Item Inspected</TableHead>
                <TableHead className="text-center">Item Quantity</TableHead>
                <TableHead>Unit</TableHead>
                <TableHead className="text-center">Expiry Date</TableHead>
                <TableHead>Request Amount</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredInspections.length > 0 ? (
                filteredInspections.map((inspection) => (
                  <TableRow
                    key={inspection.inspection_id}
                    className="cursor-pointer hover:bg-muted transition-colors"
                    onClick={() => handleRowClick(inspection)}
                  >
                    <TableCell className="text-center">{inspection.inspection_id}</TableCell>
                    <TableCell>
                      <img
                        src={inspection.picture_url}
                        alt={inspection.item_inspected}
                        className="w-12 h-12 object-cover rounded"
                      />
                    </TableCell>
                    <TableCell>{inspection.item_inspected}</TableCell>
                    <TableCell className="text-center">{inspection.item_quantity}</TableCell>
                    <TableCell>{inspection.unit}</TableCell>
                    <TableCell className={`${getExpiryDateStyle(inspection.expiry_date)} rounded-md px-2 py-1 text-center`}>
                      {inspection.expiry_date}
                    </TableCell>
                    <TableCell onClick={(e) => e.stopPropagation()}>
                      <Select
                        onValueChange={(value) => handleRequestAmountChange(value, inspection.inspection_id)}
                        defaultValue={inspection.request_amount.toString()}
                      >
                        <SelectTrigger className="w-[100px]">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          {[0, 1, 2, 3, 4, 5].map((amount) => (
                            <SelectItem key={amount} value={amount.toString()}>
                              {amount}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} className="text-center">No matching results found</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      )}

      <Dialog open={showRequestPopup} onOpenChange={setShowRequestPopup}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Request List Preview</DialogTitle>
            <DialogDescription>
              Review the items to be requested below.
            </DialogDescription>
          </DialogHeader>
          <div ref={dialogContentRef} className="grid gap-4 py-4 max-h-[60vh] overflow-y-auto pr-4">
            {requestList.map((item, index) => (
              <div key={item.inspection_id}>
                <div className="grid grid-cols-3 items-center gap-4">
                  <Label htmlFor={`item-${item.inspection_id}`}>{item.item_inspected}</Label>
                  <Input
                    id={`item-${item.inspection_id}`}
                    value={item.request_amount}
                    className="col-span-1"
                    readOnly
                  />
                  <span>{item.unit}</span>
                  <div className="col-span-3">
                    <Label htmlFor={`description-${item.inspection_id}`}>Description</Label>
                    <Textarea
                      id={`description-${item.inspection_id}`}
                      value={item.description}
                      className="mt-1 resize-none bg-transparent"
                      readOnly
                    />
                  </div>
                  <div className="col-span-3 mt-2">
                    <img
                      src={item.picture_url}
                      alt={item.item_inspected}
                      className="w-full h-48 object-cover rounded"
                    />
                  </div>
                </div>
                {index < requestList.length - 1 && <Separator className="my-4" />}
              </div>
            ))}
          </div>
          <DialogFooter>
            <Button onClick={handleSubmitRequest} disabled={isLoading}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Submit Request
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={!!selectedItem} onOpenChange={(open) => {
        if (!open) {
          setSelectedItem(null);
          setEditedItem(null);
          setHasChanges(false);
        }
      }}>
        <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle>Edit Inspection</DialogTitle>
            <DialogDescription>
              Make changes to the inspection details here. Click save when done.
            </DialogDescription>
          </DialogHeader>
          {editedItem && (
            <div className="grid gap-4 py-4">
              <div className="flex justify-center mb-4">
                <img
                  src={editedItem.picture_url}
                  alt={editedItem.item_inspected}
                  className="w-48 h-48 object-cover rounded"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="item_inspected">Item Inspected</Label>
                  <Input
                    id="item_inspected"
                    value={editedItem.item_inspected}
                    onChange={(e) => handleInputChange('item_inspected', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="item_quantity">Item Quantity</Label>
                  <Select
                    value={editedItem.item_quantity.toString()}
                    onValueChange={(value) => handleInputChange('item_quantity', parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select quantity" />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 4, 5, 10, 20, 30, 50].map((quantity) => (
                        <SelectItem key={quantity} value={quantity.toString()}>
                          {quantity}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="unit">Unit</Label>
                  <Select
                    value={editedItem.unit}
                    onValueChange={(value) => handleInputChange('unit', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select unit" />
                    </SelectTrigger>
                    <SelectContent>
                      {units.map((unit) => (
                        <SelectItem key={unit} value={unit}>
                          {unit}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="expiry_date">Expiry Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.expiry_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.expiry_date ? format(new Date(editedItem.expiry_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.expiry_date)}
                        onSelect={(date) => handleDateChange('expiry_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="next_inspection_date">Next Inspection Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.next_inspection_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.next_inspection_date ? format(new Date(editedItem.next_inspection_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.next_inspection_date)}
                        onSelect={(date) => handleDateChange('next_inspection_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="inspected_by">Inspected By</Label>
                  <Select
                    value={editedItem.inspected_by}
                    onValueChange={(value) => handleInputChange('inspected_by', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select inspector" />
                    </SelectTrigger>
                    <SelectContent>
                      {users.map((user) => (
                        <SelectItem key={user} value={user}>
                          {user}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">Status</Label>
                  <Select
                    value={editedItem.status}
                    onValueChange={(value) => handleInputChange('status', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      {statuses.map((status) => (
                        <SelectItem key={status} value={status}>
                          {status}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location">Location</Label>
                  <Select
                    value={editedItem.location}
                    onValueChange={(value) => handleInputChange('location', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select location" />
                    </SelectTrigger>
                    <SelectContent>
                      {locations.map((location) => (
                        <SelectItem key={location} value={location}>
                          {location}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2 col-span-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={editedItem.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    className="resize-none"
                  />
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            {hasChanges ? (
              <>
                <Button onClick={handleSave}>Save changes</Button>
                <Button variant="outline" onClick={() => {
                  setEditedItem(selectedItem);
                  setHasChanges(false);
                }}>
                  Cancel
                </Button>
              </>
            ) : (
              <Button onClick={() => {
                setSelectedItem(null);
                setEditedItem(null);
              }}>
                Close
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}





=V23===================================
npx shadcn@latest add "https://v0.dev/chat/b/b_9OsbM3MVv1x?token=eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..sId44ze9JtTImur1.jap-Krkv7BQVqySb4_63OMNo7uqRO-_aMp0Eakqefkli-hJk2TY92ezxgow.Cw7bCEH5AaKk0CKel0wiNQ"
=V23===================================
-Add picture_url. items description etc in the table inspection_request
-Submit, auto generate the 4-digit order numbers as the historical track item
-Preview Request List with additional function to update the Request_Amout, user will fetch the previos input if order has not submit.
+++++++++++++++++++++++++++++++++++++++

'use client';

import { useState, useEffect, useCallback, useRef } from 'react';
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Textarea } from "@/components/ui/textarea";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Separator } from "@/components/ui/separator";
import { Loader2, AlertCircle, CalendarIcon } from 'lucide-react';
import { supabase } from './createClient'; // Assuming you have Supabase setup
import { format, differenceInDays } from 'date-fns';
import { cn } from '@/lib/utils';

type Inspection = {
  inspection_id: number;
  picture_url: string;
  item_inspected: string;
  item_quantity: number;
  unit: string;
  expiry_date: string;
  request_amount: number;
  location: string;
  inspection_date: string;
  inspected_by: string;
  kit_condition: string;
  next_inspection_date: string;
  status: string;
  description: string;
};

const initialDummyData: Inspection[] = []; // Initial data is empty; will be fetched.

const users = ['John Doe', 'Jane Smith', 'Mike Johnson', 'Sarah Lee'];
const statuses = ['Passed', 'Needs Attention', 'Failed'];
const locations = ['Main Office', 'Workshop', 'Reception', 'Gym'];
const units = ['box', 'pack', 'roll', 'piece', 'pair'];

// Centralized CRUD operations
const InspectionService = {
  create: async (newInspection: Inspection) => {
    const { data, error } = await supabase.from('inspections').insert([newInspection]);
    if (error) throw error;
    return data;
  },
  getAll: async () => {
    const { data, error } = await supabase.from('inspections').select('*');
    if (error) throw error;
    return data;
  },
  update: async (inspectionId: number, updatedFields: Partial<Inspection>) => {
    const { data, error } = await supabase.from('inspections').update(updatedFields).eq('inspection_id', inspectionId);
    if (error) throw error;
    return data;
  },
  delete: async (inspectionId: number) => {
    const { data, error } = await supabase.from('inspections').delete().eq('inspection_id', inspectionId);
    if (error) throw error;
    return data;
  },
};

export default function FirstAidInspectionPreview() {
  const [inspections, setInspections] = useState<Inspection[]>(initialDummyData);
  const [filteredInspections, setFilteredInspections] = useState<Inspection[]>(initialDummyData);
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [selectedItem, setSelectedItem] = useState<Inspection | null>(null);
  const [editedItem, setEditedItem] = useState<Inspection | null>(null);
  const [hasChanges, setHasChanges] = useState(false);
  const [requestList, setRequestList] = useState<Inspection[]>([]);
  const [showRequestPopup, setShowRequestPopup] = useState(false);
  const [warningMessage, setWarningMessage] = useState('');
  const dialogContentRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    setIsLoading(true);
    InspectionService.getAll()
      .then((data) => {
        setInspections(data);
        setFilteredInspections(data);
      })
      .catch((error) => console.error('Failed to fetch inspections:', error))
      .finally(() => setIsLoading(false));
  }, []);

  useEffect(() => {
    setFilteredInspections(
      inspections.filter((inspection) =>
        Object.values(inspection).some((value) =>
          value && value.toString().toLowerCase().includes(searchQuery.toLowerCase())
        )
      )
    );
  }, [searchQuery, inspections]);

  const handleRequestAmountChange = (value: string, inspectionId: number) => {
    const updatedInspections = inspections.map((inspection) =>
      inspection.inspection_id === inspectionId ? { ...inspection, request_amount: parseInt(value) } : inspection
    );
    setInspections(updatedInspections);
  };

  const handleRowClick = (inspection: Inspection) => {
    setSelectedItem(inspection);
    setEditedItem(inspection);
    setHasChanges(false);
  };

  const handleInputChange = (name: string, value: string | number) => {
    setEditedItem((prev) => {
      if (!prev) return null;
      const updatedItem = { ...prev, [name]: value };
      setHasChanges(JSON.stringify(updatedItem) !== JSON.stringify(selectedItem));
      return updatedItem;
    });
  };

  const handleDateChange = (name: string, date: Date | undefined) => {
    if (date) {
      handleInputChange(name, format(date, 'yyyy-MM-dd'));
    }
  };

  const handleSave = async () => {
    if (editedItem) {
      setIsLoading(true);
      try {
        await InspectionService.update(editedItem.inspection_id, editedItem);
        setInspections((prevInspections) =>
          prevInspections.map((inspection) => (inspection.inspection_id === editedItem.inspection_id ? editedItem : inspection))
        );
        setSelectedItem(null);
        setEditedItem(null);
        setHasChanges(false);
        setWarningMessage('Changes saved successfully!');
      } catch (error) {
        console.error('Error updating inspection:', error);
        setWarningMessage('Error saving changes. Please try again.');
      } finally {
        setIsLoading(false);
      }
    }
  };

  const handlePreviewRequest = async () => {
    const requests = inspections.filter((inspection) => inspection.request_amount > 0);

    if (requests.length > 0) {
      try {
        setIsLoading(true);

        for (const item of requests) {
          const { error } = await supabase
            .from('inspections')
            .update({ request_amount: item.request_amount })
            .eq('inspection_id', item.inspection_id);
          if (error) throw error;
        }

        setRequestList(requests);
        setShowRequestPopup(true);
        setWarningMessage('');
      } catch (error) {
        console.error('Failed to update request amounts:', error);
        setWarningMessage('Failed to update request amounts. Please try again.');
      } finally {
        setIsLoading(false);
      }
    } else {
      setWarningMessage('Request list is empty. Please add items before previewing.');
      setShowRequestPopup(false);
    }
  };

  const handleSubmitRequest = async () => {
    setIsLoading(true);

    try {
      const { data: latestRequest, error: fetchError } = await supabase
        .from('inspections_request')
        .select('request_order_number')
        .order('request_order_number', { ascending: false })
        .limit(1);

      if (fetchError) throw fetchError;

      let nextRequestNumber = 1;
      if (latestRequest.length > 0 && latestRequest[0].request_order_number) {
        nextRequestNumber = parseInt(latestRequest[0].request_order_number) + 1;
      }

      const formattedRequestNumber = nextRequestNumber.toString().padStart(4, '0');

      const { data: requestData, error: requestError } = await supabase.from('inspections_request').insert(
        requestList.map((item) => ({
          inspection_id: item.inspection_id,
          request_order_number: formattedRequestNumber,
          request_amount: item.request_amount,
        }))
      );

      if (requestError) throw requestError;

      for (const item of requestList) {
        const updatedQuantity = item.item_quantity - item.request_amount;
        const { error: updateError } = await supabase
          .from('inspections')
          .update({ item_quantity: updatedQuantity })
          .eq('inspection_id', item.inspection_id);
        if (updateError) throw updateError;
      }

      setInspections((prevInspections) =>
        prevInspections.map((inspection) => {
          const requestItem = requestList.find((item) => item.inspection_id === inspection.inspection_id);
          if (requestItem) {
            return {
              ...inspection,
              item_quantity: inspection.item_quantity - requestItem.request_amount,
              request_amount: 0,
            };
          }
          return inspection;
        })
      );

      console.log('Request successfully submitted:', requestData);
      setShowRequestPopup(false);
      setRequestList([]);
      setWarningMessage('Request submitted successfully and inventory updated!');
    } catch (error) {
      console.error('Failed to submit request or update inventory:', error);
      setWarningMessage('Failed to submit request or update inventory. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const getExpiryDateStyle = useCallback((expiryDate: string) => {
    const today = new Date();
    const expiry = new Date(expiryDate);
    const daysUntilExpiry = differenceInDays(expiry, today);

    if (daysUntilExpiry < 0) return 'bg-red-500 text-white';
    if (daysUntilExpiry <= 90) return 'bg-orange-500 text-white';
    return 'bg-green-500 text-black';
  }, []);

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6 text-center">First Aid Inspection List (Preview)</h1>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Search Inspections</CardTitle>
        </CardHeader>
        <CardContent>
          <Input
            type="text"
            placeholder="Search across all columns..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full"
          />
        </CardContent>
      </Card>

      {warningMessage && (
        <Alert variant={warningMessage.includes('successfully') ? 'default' : 'destructive'} className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Notification</AlertTitle>
          <AlertDescription>{warningMessage}</AlertDescription>
        </Alert>
      )}

      <div className="flex justify-end mb-6">
        <Button onClick={handlePreviewRequest}>Preview Request List</Button>
      </div>

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      ) : (
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="text-center">Item ID</TableHead>
                <TableHead>Picture</TableHead>
                <TableHead>Item Inspected</TableHead>
                <TableHead className="text-center">Item Quantity</TableHead>
                <TableHead>Unit</TableHead>
                <TableHead className="text-center">Expiry Date</TableHead>
                <TableHead>Request Amount</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredInspections.length > 0 ? (
                filteredInspections.map((inspection) => (
                  <TableRow
                    key={inspection.inspection_id}
                    className="cursor-pointer hover:bg-muted transition-colors"
                    onClick={() => handleRowClick(inspection)}
                  >
                    <TableCell className="text-center">{inspection.inspection_id}</TableCell>
                    <TableCell>
                      <img
                        src={inspection.picture_url}
                        alt={inspection.item_inspected}
                        className="w-12 h-12 object-cover rounded"
                      />
                    </TableCell>
                    <TableCell>{inspection.item_inspected}</TableCell>
                    <TableCell className="text-center">{inspection.item_quantity}</TableCell>
                    <TableCell>{inspection.unit}</TableCell>
                    <TableCell className={`${getExpiryDateStyle(inspection.expiry_date)} rounded-md px-2 py-1 text-center`}>
                      {inspection.expiry_date}
                    </TableCell>
                    <TableCell onClick={(e) => e.stopPropagation()}>
                      <Select
                        onValueChange={(value) => handleRequestAmountChange(value, inspection.inspection_id)}
                        defaultValue={inspection.request_amount.toString()}
                      >
                        <SelectTrigger className="w-[100px]">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          {[0, 1, 2, 3, 4, 5].map((amount) => (
                            <SelectItem key={amount} value={amount.toString()}>
                              {amount}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} className="text-center">No matching results found</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      )}

      <Dialog open={showRequestPopup} onOpenChange={setShowRequestPopup}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Request List Preview</DialogTitle>
            <DialogDescription>
              Review the items to be requested below.
            </DialogDescription>
          </DialogHeader>
          <div ref={dialogContentRef} className="grid gap-4 py-4 max-h-[60vh] overflow-y-auto pr-4">
            {requestList.map((item, index) => (
              <div key={item.inspection_id}>
                <div className="grid grid-cols-3 items-center gap-4">
                  <Label htmlFor={`item-${item.inspection_id}`}>{item.item_inspected}</Label>
                  <Input
                    id={`item-${item.inspection_id}`}
                    value={item.request_amount}
                    className="col-span-1"
                    readOnly
                  />
                  <span>{item.unit}</span>
                  <div className="col-span-3">
                    <Label htmlFor={`description-${item.inspection_id}`}>Description</Label>
                    <Textarea
                      id={`description-${item.inspection_id}`}
                      value={item.description}
                      className="mt-1 resize-none bg-transparent"
                      readOnly
                    />
                  </div>
                  <div className="col-span-3 mt-2">
                    <img
                      src={item.picture_url}
                      alt={item.item_inspected}
                      className="w-full h-48 object-cover rounded"
                    />
                  </div>
                </div>
                {index < requestList.length - 1 && <Separator className="my-4" />}
              </div>
            ))}
          </div>
          <DialogFooter>
            <Button onClick={handleSubmitRequest} disabled={isLoading}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Submit Request
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={!!selectedItem} onOpenChange={(open) => {
        if (!open) {
          setSelectedItem(null);
          setEditedItem(null);
          setHasChanges(false);
        }
      }}>
        <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle>Edit Inspection</DialogTitle>
            <DialogDescription>
              Make changes to the inspection details here. Click save when done.
            </DialogDescription>
          </DialogHeader>
          {editedItem && (
            <div className="grid gap-4 py-4">
              <div className="flex justify-center mb-4">
                <img
                  src={editedItem.picture_url}
                  alt={editedItem.item_inspected}
                  className="w-48 h-48 object-cover rounded"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="item_inspected">Item Inspected</Label>
                  <Input
                    id="item_inspected"
                    value={editedItem.item_inspected}
                    onChange={(e) => handleInputChange('item_inspected', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="item_quantity">Item Quantity</Label>
                  <Select
                    value={editedItem.item_quantity.toString()}
                    onValueChange={(value) => handleInputChange('item_quantity', parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select quantity" />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 4, 5, 10, 20, 30, 50].map((quantity) => (
                        <SelectItem key={quantity} value={quantity.toString()}>
                          {quantity}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="unit">Unit</Label>
                  <Select
                    value={editedItem.unit}
                    onValueChange={(value) => handleInputChange('unit', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select unit" />
                    </SelectTrigger>
                    <SelectContent>
                      {units.map((unit) => (
                        <SelectItem key={unit} value={unit}>
                          {unit}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="expiry_date">Expiry Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.expiry_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.expiry_date ? format(new Date(editedItem.expiry_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.expiry_date)}
                        onSelect={(date) => handleDateChange('expiry_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="next_inspection_date">Next Inspection Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.next_inspection_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.next_inspection_date ? format(new Date(editedItem.next_inspection_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.next_inspection_date)}
                        onSelect={(date) => handleDateChange('next_inspection_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="inspected_by">Inspected By</Label>
                  <Select
                    value={editedItem.inspected_by}
                    onValueChange={(value) => handleInputChange('inspected_by', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select inspector" />
                    </SelectTrigger>
                    <SelectContent>
                      {users.map((user) => (
                        <SelectItem key={user} value={user}>
                          {user}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">Status</Label>
                  <Select
                    value={editedItem.status}
                    onValueChange={(value) => handleInputChange('status', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      {statuses.map((status) => (
                        <SelectItem key={status} value={status}>
                          {status}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location">Location</Label>
                  <Select
                    value={editedItem.location}
                    onValueChange={(value) => handleInputChange('location', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select location" />
                    </SelectTrigger>
                    <SelectContent>
                      {locations.map((location) => (
                        <SelectItem key={location} value={location}>
                          {location}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2 col-span-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={editedItem.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    className="resize-none"
                  />
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            {hasChanges ? (
              <>
                <Button onClick={handleSave}>Save changes</Button>
                <Button variant="outline" onClick={() => {
                  setEditedItem(selectedItem);
                  setHasChanges(false);
                }}>
                  Cancel
                </Button>
              </>
            ) : (
              <Button onClick={() => {
                setSelectedItem(null);
                setEditedItem(null);
              }}>
                Close
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}







=V23===================================
npx shadcn@latest add "https://v0.dev/chat/b/b_9OsbM3MVv1x?token=eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..sId44ze9JtTImur1.jap-Krkv7BQVqySb4_63OMNo7uqRO-_aMp0Eakqefkli-hJk2TY92ezxgow.Cw7bCEH5AaKk0CKel0wiNQ"
=V23===================================
-Preview Request List with additional function to update the Request_Amout, user will fetch the previos input if order has not submit.
+++++++++++++++++++++++++++++++++++++++


'use client';

import { useState, useEffect, useCallback, useRef } from 'react';
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Textarea } from "@/components/ui/textarea";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Separator } from "@/components/ui/separator";
import { Loader2, AlertCircle, CalendarIcon } from 'lucide-react';
import { supabase } from './createClient'; // Assuming you have Supabase setup
import { format, differenceInDays } from 'date-fns';
import { cn } from '@/lib/utils';

type Inspection = {
  inspection_id: number;
  picture_url: string;
  item_inspected: string;
  item_quantity: number;
  unit: string;
  expiry_date: string;
  request_amount: number;
  location: string;
  inspection_date: string;
  inspected_by: string;
  kit_condition: string;
  next_inspection_date: string;
  status: string;
  description: string;
};

const initialDummyData: Inspection[] = []; // Initial data is empty; will be fetched.

const users = ['John Doe', 'Jane Smith', 'Mike Johnson', 'Sarah Lee'];
const statuses = ['Passed', 'Needs Attention', 'Failed'];
const locations = ['Main Office', 'Workshop', 'Reception', 'Gym'];
const units = ['box', 'pack', 'roll', 'piece', 'pair'];

// Centralized CRUD operations
const InspectionService = {
  create: async (newInspection: Inspection) => {
    const { data, error } = await supabase.from('inspections').insert([newInspection]);
    if (error) throw error;
    return data;
  },
  getAll: async () => {
    const { data, error } = await supabase.from('inspections').select('*');
    if (error) throw error;
    return data;
  },
  update: async (inspectionId: number, updatedFields: Partial<Inspection>) => {
    const { data, error } = await supabase.from('inspections').update(updatedFields).eq('inspection_id', inspectionId);
    if (error) throw error;
    return data;
  },
  delete: async (inspectionId: number) => {
    const { data, error } = await supabase.from('inspections').delete().eq('inspection_id', inspectionId);
    if (error) throw error;
    return data;
  },
};

export default function FirstAidInspectionPreview() {
  const [inspections, setInspections] = useState<Inspection[]>(initialDummyData);
  const [filteredInspections, setFilteredInspections] = useState<Inspection[]>(initialDummyData);
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [selectedItem, setSelectedItem] = useState<Inspection | null>(null);
  const [editedItem, setEditedItem] = useState<Inspection | null>(null);
  const [hasChanges, setHasChanges] = useState(false);
  const [requestList, setRequestList] = useState<Inspection[]>([]);
  const [showRequestPopup, setShowRequestPopup] = useState(false);
  const [warningMessage, setWarningMessage] = useState('');
  const dialogContentRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    setIsLoading(true);
    InspectionService.getAll()
      .then((data) => {
        setInspections(data);
        setFilteredInspections(data);
      })
      .catch((error) => console.error('Failed to fetch inspections:', error))
      .finally(() => setIsLoading(false));
  }, []);

  useEffect(() => {
    setFilteredInspections(
      inspections.filter((inspection) =>
        Object.values(inspection).some((value) =>
          value && value.toString().toLowerCase().includes(searchQuery.toLowerCase())
        )
      )
    );
  }, [searchQuery, inspections]);

  const handleRequestAmountChange = (value: string, inspectionId: number) => {
    const updatedInspections = inspections.map((inspection) =>
      inspection.inspection_id === inspectionId ? { ...inspection, request_amount: parseInt(value) } : inspection
    );
    setInspections(updatedInspections);
  };

  const handleRowClick = (inspection: Inspection) => {
    setSelectedItem(inspection);
    setEditedItem(inspection);
    setHasChanges(false);
  };

  const handleInputChange = (name: string, value: string | number) => {
    setEditedItem((prev) => {
      if (!prev) return null;
      const updatedItem = { ...prev, [name]: value };
      setHasChanges(JSON.stringify(updatedItem) !== JSON.stringify(selectedItem));
      return updatedItem;
    });
  };

  const handleDateChange = (name: string, date: Date | undefined) => {
    if (date) {
      handleInputChange(name, format(date, 'yyyy-MM-dd'));
    }
  };

  const handleSave = async () => {
    if (editedItem) {
      setIsLoading(true);
      try {
        await InspectionService.update(editedItem.inspection_id, editedItem);
        setInspections((prevInspections) =>
          prevInspections.map((inspection) => (inspection.inspection_id === editedItem.inspection_id ? editedItem : inspection))
        );
        setSelectedItem(null);
        setEditedItem(null);
        setHasChanges(false);
        setWarningMessage('Changes saved successfully!');
      } catch (error) {
        console.error('Error updating inspection:', error);
        setWarningMessage('Error saving changes. Please try again.');
      } finally {
        setIsLoading(false);
      }
    }
  };

  const handlePreviewRequest = async () => {
    const requests = inspections.filter((inspection) => inspection.request_amount > 0);

    if (requests.length > 0) {
      // Update the request_amount for all the filtered inspections in the Supabase table
      try {
        setIsLoading(true);

        // Update each inspection's request amount in Supabase
        for (const item of requests) {
          const { error } = await supabase
            .from('inspections')
            .update({ request_amount: item.request_amount })
            .eq('inspection_id', item.inspection_id);
          if (error) throw error;
        }

        setRequestList(requests);
        setShowRequestPopup(true);
        setWarningMessage('');
      } catch (error) {
        console.error('Failed to update request amounts:', error);
        setWarningMessage('Failed to update request amounts. Please try again.');
      } finally {
        setIsLoading(false);
      }
    } else {
      setWarningMessage('Request list is empty. Please add items before previewing.');
      setShowRequestPopup(false);
    }
  };

  const handleSubmitRequest = async () => {
    setIsLoading(true);
    try {
      // Submit the request
      const { data: requestData, error: requestError } = await supabase.from('inspections_request').insert(requestList);
      if (requestError) throw requestError;

      // Update the inspections table
      for (const item of requestList) {
        const updatedQuantity = item.item_quantity - item.request_amount;
        const { error: updateError } = await supabase
          .from('inspections')
          .update({ item_quantity: updatedQuantity })
          .eq('inspection_id', item.inspection_id);
        if (updateError) throw updateError;
      }

      // Update local state
      setInspections((prevInspections) =>
        prevInspections.map((inspection) => {
          const requestItem = requestList.find((item) => item.inspection_id === inspection.inspection_id);
          if (requestItem) {
            return {
              ...inspection,
              item_quantity: inspection.item_quantity - requestItem.request_amount,
              request_amount: 0
            };
          }
          return inspection;
        })
      );

      console.log('Request successfully submitted:', requestData);
      setShowRequestPopup(false);
      setRequestList([]);
      setWarningMessage('Request submitted successfully and inventory updated!');
    } catch (error) {
      console.error('Failed to submit request or update inventory:', error);
      setWarningMessage('Failed to submit request or update inventory. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const getExpiryDateStyle = useCallback((expiryDate: string) => {
    const today = new Date();
    const expiry = new Date(expiryDate);
    const daysUntilExpiry = differenceInDays(expiry, today);

    if (daysUntilExpiry < 0) return 'bg-red-500 text-white';
    if (daysUntilExpiry <= 90) return 'bg-orange-500 text-white';
    return 'bg-green-500 text-black';
  }, []);

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6 text-center">First Aid Inspection List (Preview)</h1>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Search Inspections</CardTitle>
        </CardHeader>
        <CardContent>
          <Input
            type="text"
            placeholder="Search across all columns..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full"
          />
        </CardContent>
      </Card>

      {warningMessage && (
        <Alert variant={warningMessage.includes('successfully') ? 'default' : 'destructive'} className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Notification</AlertTitle>
          <AlertDescription>{warningMessage}</AlertDescription>
        </Alert>
      )}

      <div className="flex justify-end mb-6">
        <Button onClick={handlePreviewRequest}>Preview Request List</Button>
      </div>

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      ) : (
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="text-center">Item ID</TableHead>
                <TableHead>Picture</TableHead>
                <TableHead>Item Inspected</TableHead>
                <TableHead className="text-center">Item Quantity</TableHead>
                <TableHead>Unit</TableHead>
                <TableHead className="text-center">Expiry Date</TableHead>
                <TableHead>Request Amount</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredInspections.length > 0 ? (
                filteredInspections.map((inspection) => (
                  <TableRow
                    key={inspection.inspection_id}
                    className="cursor-pointer hover:bg-muted transition-colors"
                    onClick={() => handleRowClick(inspection)}
                  >
                    <TableCell className="text-center">{inspection.inspection_id}</TableCell>
                    <TableCell>
                      <img
                        src={inspection.picture_url}
                        alt={inspection.item_inspected}
                        className="w-12 h-12 object-cover rounded"
                      />
                    </TableCell>
                    <TableCell>{inspection.item_inspected}</TableCell>
                    <TableCell className="text-center">{inspection.item_quantity}</TableCell>
                    <TableCell>{inspection.unit}</TableCell>
                    <TableCell className={`${getExpiryDateStyle(inspection.expiry_date)} rounded-md px-2 py-1 text-center`}>
                      {inspection.expiry_date}
                    </TableCell>
                    <TableCell onClick={(e) => e.stopPropagation()}>
                      <Select
                        onValueChange={(value) => handleRequestAmountChange(value, inspection.inspection_id)}
                        defaultValue={inspection.request_amount.toString()}
                      >
                        <SelectTrigger className="w-[100px]">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          {[0, 1, 2, 3, 4, 5].map((amount) => (
                            <SelectItem key={amount} value={amount.toString()}>
                              {amount}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} className="text-center">No matching results found</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      )}

      <Dialog open={showRequestPopup} onOpenChange={setShowRequestPopup}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Request List Preview</DialogTitle>
            <DialogDescription>
              Review the items to be requested below.
            </DialogDescription>
          </DialogHeader>
          <div ref={dialogContentRef} className="grid gap-4 py-4 max-h-[60vh] overflow-y-auto pr-4">
            {requestList.map((item, index) => (
              <div key={item.inspection_id}>
                <div className="grid grid-cols-3 items-center gap-4">
                  <Label htmlFor={`item-${item.inspection_id}`}>{item.item_inspected}</Label>
                  <Input
                    id={`item-${item.inspection_id}`}
                    value={item.request_amount}
                    className="col-span-1"
                    readOnly
                  />
                  <span>{item.unit}</span>
                  <div className="col-span-3">
                    <Label htmlFor={`description-${item.inspection_id}`}>Description</Label>
                    <Textarea
                      id={`description-${item.inspection_id}`}
                      value={item.description}
                      className="mt-1 resize-none bg-transparent"
                      readOnly
                    />
                  </div>
                  <div className="col-span-3 mt-2">
                    <img
                      src={item.picture_url}
                      alt={item.item_inspected}
                      className="w-full h-48 object-cover rounded"
                    />
                  </div>
                </div>
                {index < requestList.length - 1 && <Separator className="my-4" />}
              </div>
            ))}
          </div>
          <DialogFooter>
            <Button onClick={handleSubmitRequest} disabled={isLoading}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Submit Request
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={!!selectedItem} onOpenChange={(open) => {
        if (!open) {
          setSelectedItem(null);
          setEditedItem(null);
          setHasChanges(false);
        }
      }}>
        <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle>Edit Inspection</DialogTitle>
            <DialogDescription>
              Make changes to the inspection details here. Click save when done.
            </DialogDescription>
          </DialogHeader>
          {editedItem && (
            <div className="grid gap-4 py-4">
              <div className="flex justify-center mb-4">
                <img
                  src={editedItem.picture_url}
                  alt={editedItem.item_inspected}
                  className="w-48 h-48 object-cover rounded"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="item_inspected">Item Inspected</Label>
                  <Input
                    id="item_inspected"
                    value={editedItem.item_inspected}
                    onChange={(e) => handleInputChange('item_inspected', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="item_quantity">Item Quantity</Label>
                  <Select
                    value={editedItem.item_quantity.toString()}
                    onValueChange={(value) => handleInputChange('item_quantity', parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select quantity" />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 4, 5, 10, 20, 30, 50].map((quantity) => (
                        <SelectItem key={quantity} value={quantity.toString()}>
                          {quantity}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="unit">Unit</Label>
                  <Select
                    value={editedItem.unit}
                    onValueChange={(value) => handleInputChange('unit', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select unit" />
                    </SelectTrigger>
                    <SelectContent>
                      {units.map((unit) => (
                        <SelectItem key={unit} value={unit}>
                          {unit}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="expiry_date">Expiry Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.expiry_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.expiry_date ? format(new Date(editedItem.expiry_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.expiry_date)}
                        onSelect={(date) => handleDateChange('expiry_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="next_inspection_date">Next Inspection Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.next_inspection_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.next_inspection_date ? format(new Date(editedItem.next_inspection_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.next_inspection_date)}
                        onSelect={(date) => handleDateChange('next_inspection_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="inspected_by">Inspected By</Label>
                  <Select
                    value={editedItem.inspected_by}
                    onValueChange={(value) => handleInputChange('inspected_by', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select inspector" />
                    </SelectTrigger>
                    <SelectContent>
                      {users.map((user) => (
                        <SelectItem key={user} value={user}>
                          {user}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">Status</Label>
                  <Select
                    value={editedItem.status}
                    onValueChange={(value) => handleInputChange('status', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      {statuses.map((status) => (
                        <SelectItem key={status} value={status}>
                          {status}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location">Location</Label>
                  <Select
                    value={editedItem.location}
                    onValueChange={(value) => handleInputChange('location', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select location" />
                    </SelectTrigger>
                    <SelectContent>
                      {locations.map((location) => (
                        <SelectItem key={location} value={location}>
                          {location}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2 col-span-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={editedItem.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    className="resize-none"
                  />
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            {hasChanges ? (
              <>
                <Button onClick={handleSave}>Save changes</Button>
                <Button variant="outline" onClick={() => {
                  setEditedItem(selectedItem);
                  setHasChanges(false);
                }}>
                  Cancel
                </Button>
              </>
            ) : (
              <Button onClick={() => {
                setSelectedItem(null);
                setEditedItem(null);
              }}>
                Close
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}



=V22=Connect to Supabase==================================
npx shadcn@latest add "https://v0.dev/chat/b/b_9OsbM3MVv1x?token=eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..sId44ze9JtTImur1.jap-Krkv7BQVqySb4_63OMNo7uqRO-_aMp0Eakqefkli-hJk2TY92ezxgow.Cw7bCEH5AaKk0CKel0wiNQ"
=V22===================================

'use client'

import { useState, useEffect, useRef } from 'react'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Loader2, AlertCircle, CalendarIcon } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Calendar } from "@/components/ui/calendar"
import { format, differenceInDays } from "date-fns"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { cn } from "@/lib/utils"
import { Separator } from "@/components/ui/separator"
import { Textarea } from "@/components/ui/textarea"
import { supabase } from './createClient' // Assuming you have a Supabase client setup

type Inspection = {
  inspection_id: number
  picture_url: string
  item_inspected: string
  item_quantity: number
  unit: string
  expiry_date: string
  request_amount: number
  location: string
  inspection_date: string
  inspected_by: string
  kit_condition: string
  next_inspection_date: string
  status: string
  description: string
}

const initialDummyData: Inspection[] = [
  // {
  //   inspection_id: 1,
  //   picture_url: "/placeholder.svg?height=200&width=200",
  //   item_inspected: "Adhesive Bandages (Band-Aids)",
  //   item_quantity: 50,
  //   unit: "box",
  //   expiry_date: "2024-12-31",
  //   request_amount: 0,
  //   location: "Main Office",
  //   inspection_date: "2023-06-01",
  //   inspected_by: "John Doe",
  //   kit_condition: "Good",
  //   next_inspection_date: "2023-12-01",
  //   status: "Passed",
  //   description: "Small, flexible strips with an adhesive back and a gauze pad in the center, used to cover minor cuts, blisters, or abrasions to prevent infection and promote healing."
  // },
  // {
  //   inspection_id: 10,
  //   picture_url: "/placeholder.svg?height=200&width=200",
  //   item_inspected: "Sterile Gloves",
  //   item_quantity: 20,
  //   unit: "pair",
  //   expiry_date: "2025-05-31",
  //   request_amount: 0,
  //   location: "Workshop",
  //   inspection_date: "2023-05-30",
  //   inspected_by: "Jane Smith",
  //   kit_condition: "Excellent",
  //   next_inspection_date: "2023-11-30",
  //   status: "Passed",
  //   description: "Disposable gloves worn to protect both the rescuer and the patient from infection or contamination when treating open wounds or handling body fluids."
  // }
]

const users = ["John Doe", "Jane Smith", "Mike Johnson", "Sarah Lee"]
const statuses = ["Passed", "Needs Attention", "Failed"]
const locations = ["Main Office", "Workshop", "Reception", "Gym"]
const units = ["box", "pack", "roll", "piece", "pair"]

// CRUD operations

// CREATE
const createInspection = async (newInspection: Inspection) => {
  const { data, error } = await supabase
    .from('inspections')
    .insert([newInspection])

  if (error) {
    console.error('Error creating inspection:', error)
    return null
  }

  return data
}



// READ
const getInspections = async () => {
  const { data, error } = await supabase
    .from('inspections')
    .select('*')

  if (error) {
    console.error('Error fetching inspections:', error)
    return []
  }

  return data
}




// UPDATE
const updateInspection = async (inspectionId: number, updatedFields: Partial<Inspection>) => {
  const { data, error } = await supabase
    .from('inspections')
    .update(updatedFields)
    .eq('inspection_id', inspectionId)

  if (error) {
    console.error('Error updating inspection:', error)
    return null
  }

  return data
}

// DELETE
const deleteInspection = async (inspectionId: number) => {
  const { data, error } = await supabase
    .from('inspections')
    .delete()
    .eq('inspection_id', inspectionId)

  if (error) {
    console.error('Error deleting inspection:', error)
    return null
  }

  return data
}

export default function FirstAidInspectionPreview() {
  const [inspections, setInspections] = useState<Inspection[]>(initialDummyData)
  const [filteredInspections, setFilteredInspections] = useState<Inspection[]>(initialDummyData)
  const [searchQuery, setSearchQuery] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [selectedItem, setSelectedItem] = useState<Inspection | null>(null)
  const [editedItem, setEditedItem] = useState<Inspection | null>(null)
  const [hasChanges, setHasChanges] = useState(false)
  const [requestList, setRequestList] = useState<Inspection[]>([])
  const [showRequestPopup, setShowRequestPopup] = useState(false)
  const [warningMessage, setWarningMessage] = useState('')
  const dialogContentRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    const fetchData = async () => {
      const data = await getInspections()
      setInspections(data)
      setFilteredInspections(data)
    }
    fetchData()
  }, [])

  useEffect(() => {
    setFilteredInspections(
      inspections.filter((inspection) =>
        Object.values(inspection).some(value =>
          value && value.toString().toLowerCase().includes(searchQuery.toLowerCase())
        )
      )
    )
  }, [searchQuery, inspections])

  const handleRequestAmountChange = (value: string, inspectionId: number) => {
    const updatedInspections = inspections.map(inspection =>
      inspection.inspection_id === inspectionId
        ? { ...inspection, request_amount: parseInt(value) }
        : inspection
    )
    setInspections(updatedInspections)
  }

  const handleRowClick = (inspection: Inspection) => {
    setSelectedItem(inspection)
    setEditedItem(inspection)
    setHasChanges(false)
  }

  const handleInputChange = (name: string, value: string | number) => {
    setEditedItem(prev => {
      if (!prev) return null
      const updatedItem = { ...prev, [name]: value }
      setHasChanges(JSON.stringify(updatedItem) !== JSON.stringify(selectedItem))
      return updatedItem
    })
  }

  const handleDateChange = (name: string, date: Date | undefined) => {
    if (date) {
      handleInputChange(name, format(date, 'yyyy-MM-dd'))
    }
  }

  const handleSave = async () => {
    if (editedItem) {
      await updateInspection(editedItem.inspection_id, editedItem)
      setInspections(prevInspections =>
        prevInspections.map(inspection =>
          inspection.inspection_id === editedItem.inspection_id ? editedItem : inspection
        )
      )
      setSelectedItem(null)
      setEditedItem(null)
      setHasChanges(false)
    }
  }

  const handlePreviewRequest = () => {
    const requests = inspections.filter(inspection => inspection.request_amount > 0)
    if (requests.length > 0) {
      setRequestList(requests)
      setShowRequestPopup(true)
      setWarningMessage('')
    } else {
      setWarningMessage('Request list is empty. Please add items to the request before previewing.')
      setShowRequestPopup(false)
    }
  }

  const handleSubmitRequest = async () => {
    setIsLoading(true)
    try {
      const { data, error } = await supabase
        .from('requests')
        .insert(requestList)

      if (error) throw error

      console.log('Request successfully submitted:', data)
      setShowRequestPopup(false)
      setRequestList([])
      setInspections(inspections.map(item => ({ ...item, request_amount: 0 })))
      setWarningMessage('Request submitted successfully!')
    } catch (err) {
      console.error('Failed to submit request:', err)
      setWarningMessage('Failed to submit request. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const getExpiryDateStyle = (expiryDate: string) => {
    const today = new Date()
    const expiry = new Date(expiryDate)
    const daysUntilExpiry = differenceInDays(expiry, today)

    if (daysUntilExpiry < 0) {
      return 'bg-red-500 text-white'
    } else if (daysUntilExpiry <= 90) {
      return 'bg-orange-500 text-white'
    } else {
      return 'bg-green-500 text-black'
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6 text-center">First Aid Inspection List (Preview)</h1>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Search Inspections</CardTitle>
        </CardHeader>
        <CardContent>
          <Input
            type="text"
            placeholder="Search across all columns..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full"
          />
        </CardContent>
      </Card>

      {warningMessage && (
        <Alert variant={warningMessage.includes('successfully') ? 'default' : 'destructive'} className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Notification</AlertTitle>
          <AlertDescription>{warningMessage}</AlertDescription>
        </Alert>
      )}

      <div className="flex justify-end mb-6">
        <Button onClick={handlePreviewRequest}>Preview Request List</Button>
      </div>

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      ) : (
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="text-center">Item ID</TableHead>
                <TableHead>Picture</TableHead>
                <TableHead>Item Inspected</TableHead>
                <TableHead className="text-center">Item Quantity</TableHead>
                <TableHead>Unit</TableHead>
                <TableHead className="text-center">Expiry Date</TableHead>
                <TableHead>Request Amount</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredInspections.length > 0 ? (
                filteredInspections.map((inspection) => (
                  <TableRow
                    key={inspection.inspection_id}
                    className="cursor-pointer hover:bg-muted transition-colors"
                    onClick={() => handleRowClick(inspection)}
                  >
                    <TableCell className="text-center">{inspection.inspection_id}</TableCell>
                    <TableCell>
                      <img
                        src={inspection.picture_url}
                        alt={inspection.item_inspected}
                        className="w-12 h-12 object-cover rounded"
                      />
                    </TableCell>
                    <TableCell>{inspection.item_inspected}</TableCell>
                    <TableCell className="text-center">{inspection.item_quantity}</TableCell>
                    <TableCell>{inspection.unit}</TableCell>
                    <TableCell className={`${getExpiryDateStyle(inspection.expiry_date)} rounded-md px-2 py-1 text-center`}>
                      {inspection.expiry_date}
                    </TableCell>
                    <TableCell onClick={(e) => e.stopPropagation()}>
                      <Select
                        onValueChange={(value) => handleRequestAmountChange(value, inspection.inspection_id)}
                        defaultValue={inspection.request_amount.toString()}
                      >
                        <SelectTrigger className="w-[100px]">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          {[0, 1, 2, 3, 4, 5].map((amount) => (
                            <SelectItem key={amount} value={amount.toString()}>
                              {amount}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} className="text-center">No matching results found</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      )}

      <Dialog open={showRequestPopup} onOpenChange={setShowRequestPopup}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Request List Preview</DialogTitle>
            <DialogDescription>
              Review the items to be requested below.
            </DialogDescription>
          </DialogHeader>
          <div
            ref={dialogContentRef}
            className="grid gap-4 py-4 max-h-[60vh] overflow-y-auto pr-4"
          >
            {requestList.map((item, index) => (
              <div key={item.inspection_id}>
                <div className="grid grid-cols-3 items-center gap-4">
                  <Label htmlFor={`item-${item.inspection_id}`}>{item.item_inspected}</Label>
                  <Input
                    id={`item-${item.inspection_id}`}
                    value={item.request_amount}
                    className="col-span-1"
                    readOnly
                  />
                  <span>{item.unit}</span>
                  <div className="col-span-3">
                    <Label htmlFor={`description-${item.inspection_id}`}>Description</Label>
                    <Textarea
                      id={`description-${item.inspection_id}`}
                      value={item.description}
                      className="mt-1 resize-none bg-transparent"
                      readOnly
                    />
                  </div>
                  <div className="col-span-3 mt-2">
                    <img
                      src={item.picture_url}
                      alt={item.item_inspected}
                      className="w-full h-48 object-cover rounded"
                    />
                  </div>
                </div>
                {index < requestList.length - 1 && <Separator className="my-4" />}
              </div>
            ))}
          </div>
          <DialogFooter>
            <Button onClick={handleSubmitRequest} disabled={isLoading}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Submit Request
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={!!selectedItem} onOpenChange={(open) => {
        if (!open) {
          setSelectedItem(null)
          setEditedItem(null)
          setHasChanges(false)
        }
      }}>
        <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle>Edit Inspection</DialogTitle>
            <DialogDescription>
              Make changes to the inspection details here. Click save when done.
            </DialogDescription>
          </DialogHeader>
          {editedItem && (
            <div className="grid gap-4 py-4">
              <div className="flex justify-center mb-4">
                <img
                  src={editedItem.picture_url}
                  alt={editedItem.item_inspected}
                  className="w-48 h-48 object-cover rounded"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="item_inspected">Item Inspected</Label>
                  <Input
                    id="item_inspected"
                    value={editedItem.item_inspected}
                    onChange={(e) => handleInputChange('item_inspected', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="item_quantity">Item Quantity</Label>
                  <Select
                    value={editedItem.item_quantity.toString()}
                    onValueChange={(value) => handleInputChange('item_quantity', parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select quantity" />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 4, 5, 10, 20, 30, 50].map((quantity) => (
                        <SelectItem key={quantity} value={quantity.toString()}>
                          {quantity}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="unit">Unit</Label>
                  <Select
                    value={editedItem.unit}
                    onValueChange={(value) => handleInputChange('unit', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select unit" />
                    </SelectTrigger>
                    <SelectContent>
                      {units.map((unit) => (
                        <SelectItem key={unit} value={unit}>
                          {unit}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="expiry_date">Expiry Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.expiry_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.expiry_date ? format(new Date(editedItem.expiry_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.expiry_date)}
                        onSelect={(date) => handleDateChange('expiry_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="next_inspection_date">Next Inspection Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.next_inspection_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.next_inspection_date ? format(new Date(editedItem.next_inspection_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.next_inspection_date)}
                        onSelect={(date) => handleDateChange('next_inspection_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="inspected_by">Inspected By</Label>
                  <Select
                    value={editedItem.inspected_by}
                    onValueChange={(value) => handleInputChange('inspected_by', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select inspector" />
                    </SelectTrigger>
                    <SelectContent>
                      {users.map((user) => (
                        <SelectItem key={user} value={user}>
                          {user}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">Status</Label>
                  <Select
                    value={editedItem.status}
                    onValueChange={(value) => handleInputChange('status', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      {statuses.map((status) => (
                        <SelectItem key={status} value={status}>
                          {status}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location">Location</Label>
                  <Select
                    value={editedItem.location}
                    onValueChange={(value) => handleInputChange('location', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select location" />
                    </SelectTrigger>
                    <SelectContent>
                      {locations.map((location) => (
                        <SelectItem key={location} value={location}>
                          {location}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2 col-span-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={editedItem.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    className="resize-none"
                  />
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            {hasChanges ? (
              <>
                <Button onClick={handleSave}>Save changes</Button>
                <Button variant="outline" onClick={() => {
                  setEditedItem(selectedItem)
                  setHasChanges(false)
                }}>
                  Cancel
                </Button>
              </>
            ) : (
              <Button onClick={() => {
                setSelectedItem(null)
                setEditedItem(null)
              }}>
                Close
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}



















=V21=Connect to Supabase==================================
npx shadcn@latest add "https://v0.dev/chat/b/b_9OsbM3MVv1x?token=eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..sId44ze9JtTImur1.jap-Krkv7BQVqySb4_63OMNo7uqRO-_aMp0Eakqefkli-hJk2TY92ezxgow.Cw7bCEH5AaKk0CKel0wiNQ"
=V21===================================


'use client'

import { useState, useEffect, useRef } from 'react'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Loader2, AlertCircle, CalendarIcon } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Calendar } from "@/components/ui/calendar"
import { format, differenceInDays } from "date-fns"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { cn } from "@/lib/utils"
import { Separator } from "@/components/ui/separator"
import { Textarea } from "@/components/ui/textarea"
import { supabase } from './createClient' // Assuming you have a Supabase client setup

type Inspection = {
  inspection_id: number
  picture_url: string
  item_inspected: string
  item_quantity: number
  unit: string
  expiry_date: string
  request_amount: number
  location: string
  inspection_date: string
  inspected_by: string
  kit_condition: string
  next_inspection_date: string
  status: string
  description: string
}

const initialDummyData: Inspection[] = [
  {
    inspection_id: 1,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Adhesive Bandages (Band-Aids)",
    item_quantity: 50,
    unit: "box",
    expiry_date: "2024-12-31",
    request_amount: 0,
    location: "Main Office",
    inspection_date: "2023-06-01",
    inspected_by: "John Doe",
    kit_condition: "Good",
    next_inspection_date: "2023-12-01",
    status: "Passed",
    description: "Small, flexible strips with an adhesive back and a gauze pad in the center, used to cover minor cuts, blisters, or abrasions to prevent infection and promote healing."
  },
  {
    inspection_id: 2,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Antiseptic Wipes",
    item_quantity: 30,
    unit: "pack",
    expiry_date: "2025-06-30",
    request_amount: 0,
    location: "Workshop",
    inspection_date: "2023-05-15",
    inspected_by: "Jane Smith",
    kit_condition: "Excellent",
    next_inspection_date: "2023-11-15",
    status: "Passed",
    description: "Pre-moistened towelettes containing antiseptic solutions, such as alcohol or iodine, used to disinfect wounds or clean skin before applying bandages."
  },
  {
    inspection_id: 3,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Gauze Pads",
    item_quantity: 20,
    unit: "pack",
    expiry_date: "2023-08-15",
    request_amount: 0,
    location: "Reception",
    inspection_date: "2023-06-10",
    inspected_by: "Mike Johnson",
    kit_condition: "Fair",
    next_inspection_date: "2023-09-10",
    status: "Needs Attention",
    description: "Sterile squares of cotton gauze used to cover larger wounds or burns, absorb excess blood or fluid, and protect the wound from contamination."
  },
  {
    inspection_id: 4,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Elastic Bandage (ACE Wrap)",
    item_quantity: 5,
    unit: "roll",
    expiry_date: "2024-10-31",
    request_amount: 0,
    location: "Gym",
    inspection_date: "2023-07-01",
    inspected_by: "Sarah Lee",
    kit_condition: "Good",
    next_inspection_date: "2024-01-01",
    status: "Passed",
    description: "A stretchable bandage used to wrap sprained joints, reduce swelling, or hold dressings in place, providing support and compression."
  },
  {
    inspection_id: 5,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Medical Adhesive Tape",
    item_quantity: 10,
    unit: "roll",
    expiry_date: "2025-03-31",
    request_amount: 0,
    location: "Main Office",
    inspection_date: "2023-06-20",
    inspected_by: "John Doe",
    kit_condition: "Excellent",
    next_inspection_date: "2023-12-20",
    status: "Passed",
    description: "A sticky tape designed to secure bandages or gauze pads over wounds without irritating the skin, often breathable and easy to tear."
  },
  {
    inspection_id: 6,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Tweezers",
    item_quantity: 3,
    unit: "piece",
    expiry_date: "2026-12-31",
    request_amount: 0,
    location: "Workshop",
    inspection_date: "2023-05-25",
    inspected_by: "Jane Smith",
    kit_condition: "Good",
    next_inspection_date: "2023-11-25",
    status: "Passed",
    description: "Small metal tool with pointed tips, used to remove debris, such as splinters, glass, or ticks, from the skin."
  },
  {
    inspection_id: 7,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Scissors",
    item_quantity: 2,
    unit: "piece",
    expiry_date: "2026-12-31",
    request_amount: 0,
    location: "Reception",
    inspection_date: "2023-06-15",
    inspected_by: "Mike Johnson",
    kit_condition: "Good",
    next_inspection_date: "2023-12-15",
    status: "Passed",
    description: "Used for cutting gauze, bandages, adhesive tape, or clothing in case of emergency when quick access to a wound is needed."
  },
  {
    inspection_id: 8,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "CPR Face Shield",
    item_quantity: 5,
    unit: "piece",
    expiry_date: "2025-09-30",
    request_amount: 0,
    location: "Gym",
    inspection_date: "2023-07-05",
    inspected_by: "Sarah Lee",
    kit_condition: "Excellent",
    next_inspection_date: "2024-01-05",
    status: "Passed",
    description: "A protective barrier used during CPR to provide rescue breaths without direct contact, reducing the risk of transmitting infections."
  },
  {
    inspection_id: 9,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Instant Cold Pack",
    item_quantity: 10,
    unit: "piece",
    expiry_date: "2024-08-31",
    request_amount: 0,
    location: "Main Office",
    inspection_date: "2023-06-25",
    inspected_by: "John Doe",
    kit_condition: "Good",
    next_inspection_date: "2023-12-25",
    status: "Passed",
    description: "A single-use, chemical pack that becomes cold when activated, used to reduce swelling, numb pain, and minimize bruising from injuries like sprains or strains."
  },
  {
    inspection_id: 10,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Sterile Gloves",
    item_quantity: 20,
    unit: "pair",
    expiry_date: "2025-05-31",
    request_amount: 0,
    location: "Workshop",
    inspection_date: "2023-05-30",
    inspected_by: "Jane Smith",
    kit_condition: "Excellent",
    next_inspection_date: "2023-11-30",
    status: "Passed",
    description: "Disposable gloves worn to protect both the rescuer and the patient from infection or contamination when treating open wounds or handling body fluids."
  }
]

const users = ["John Doe", "Jane Smith", "Mike Johnson", "Sarah Lee"]
const statuses = ["Passed", "Needs Attention", "Failed"]
const locations = ["Main Office", "Workshop", "Reception", "Gym"]
const units = ["box", "pack", "roll", "piece", "pair"]

// CRUD operations

// CREATE
const createInspection = async (newInspection: Inspection) => {
  const { data, error } = await supabase
    .from('inspections')
    .insert([newInspection])

  if (error) {
    console.error('Error creating inspection:', error)
    return null
  }

  return data
}



// READ
const getInspections = async () => {
  const { data, error } = await supabase
    .from('inspections')
    .select('*')

  if (error) {
    console.error('Error fetching inspections:', error)
    return []
  }

  return data
}




// UPDATE
const updateInspection = async (inspectionId: number, updatedFields: Partial<Inspection>) => {
  const { data, error } = await supabase
    .from('inspections')
    .update(updatedFields)
    .eq('inspection_id', inspectionId)

  if (error) {
    console.error('Error updating inspection:', error)
    return null
  }

  return data
}

// DELETE
const deleteInspection = async (inspectionId: number) => {
  const { data, error } = await supabase
    .from('inspections')
    .delete()
    .eq('inspection_id', inspectionId)

  if (error) {
    console.error('Error deleting inspection:', error)
    return null
  }

  return data
}

export default function FirstAidInspectionPreview() {
  const [inspections, setInspections] = useState<Inspection[]>(initialDummyData)
  const [filteredInspections, setFilteredInspections] = useState<Inspection[]>(initialDummyData)
  const [searchQuery, setSearchQuery] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [selectedItem, setSelectedItem] = useState<Inspection | null>(null)
  const [editedItem, setEditedItem] = useState<Inspection | null>(null)
  const [hasChanges, setHasChanges] = useState(false)
  const [requestList, setRequestList] = useState<Inspection[]>([])
  const [showRequestPopup, setShowRequestPopup] = useState(false)
  const [warningMessage, setWarningMessage] = useState('')
  const dialogContentRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    const fetchData = async () => {
      const data = await getInspections()
      setInspections(data)
      setFilteredInspections(data)
    }
    fetchData()
  }, [])

  useEffect(() => {
    setFilteredInspections(
      inspections.filter((inspection) =>
        Object.values(inspection).some(value =>
          value && value.toString().toLowerCase().includes(searchQuery.toLowerCase())
        )
      )
    )
  }, [searchQuery, inspections])

  const handleRequestAmountChange = (value: string, inspectionId: number) => {
    const updatedInspections = inspections.map(inspection =>
      inspection.inspection_id === inspectionId
        ? { ...inspection, request_amount: parseInt(value) }
        : inspection
    )
    setInspections(updatedInspections)
  }

  const handleRowClick = (inspection: Inspection) => {
    setSelectedItem(inspection)
    setEditedItem(inspection)
    setHasChanges(false)
  }

  const handleInputChange = (name: string, value: string | number) => {
    setEditedItem(prev => {
      if (!prev) return null
      const updatedItem = { ...prev, [name]: value }
      setHasChanges(JSON.stringify(updatedItem) !== JSON.stringify(selectedItem))
      return updatedItem
    })
  }

  const handleDateChange = (name: string, date: Date | undefined) => {
    if (date) {
      handleInputChange(name, format(date, 'yyyy-MM-dd'))
    }
  }

  const handleSave = async () => {
    if (editedItem) {
      await updateInspection(editedItem.inspection_id, editedItem)
      setInspections(prevInspections =>
        prevInspections.map(inspection =>
          inspection.inspection_id === editedItem.inspection_id ? editedItem : inspection
        )
      )
      setSelectedItem(null)
      setEditedItem(null)
      setHasChanges(false)
    }
  }

  const handlePreviewRequest = () => {
    const requests = inspections.filter(inspection => inspection.request_amount > 0)
    if (requests.length > 0) {
      setRequestList(requests)
      setShowRequestPopup(true)
      setWarningMessage('')
    } else {
      setWarningMessage('Request list is empty. Please add items to the request before previewing.')
      setShowRequestPopup(false)
    }
  }

  const handleSubmitRequest = async () => {
    setIsLoading(true)
    try {
      const { data, error } = await supabase
        .from('requests')
        .insert(requestList)

      if (error) throw error

      console.log('Request successfully submitted:', data)
      setShowRequestPopup(false)
      setRequestList([])
      setInspections(inspections.map(item => ({ ...item, request_amount: 0 })))
      setWarningMessage('Request submitted successfully!')
    } catch (err) {
      console.error('Failed to submit request:', err)
      setWarningMessage('Failed to submit request. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const getExpiryDateStyle = (expiryDate: string) => {
    const today = new Date()
    const expiry = new Date(expiryDate)
    const daysUntilExpiry = differenceInDays(expiry, today)

    if (daysUntilExpiry < 0) {
      return 'bg-red-500 text-white'
    } else if (daysUntilExpiry <= 90) {
      return 'bg-orange-500 text-white'
    } else {
      return 'bg-green-500 text-black'
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6 text-center">First Aid Inspection List (Preview)</h1>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Search Inspections</CardTitle>
        </CardHeader>
        <CardContent>
          <Input
            type="text"
            placeholder="Search across all columns..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full"
          />
        </CardContent>
      </Card>

      {warningMessage && (
        <Alert variant={warningMessage.includes('successfully') ? 'default' : 'destructive'} className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Notification</AlertTitle>
          <AlertDescription>{warningMessage}</AlertDescription>
        </Alert>
      )}

      <div className="flex justify-end mb-6">
        <Button onClick={handlePreviewRequest}>Preview Request List</Button>
      </div>

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      ) : (
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="text-center">Item ID</TableHead>
                <TableHead>Picture</TableHead>
                <TableHead>Item Inspected</TableHead>
                <TableHead className="text-center">Item Quantity</TableHead>
                <TableHead>Unit</TableHead>
                <TableHead className="text-center">Expiry Date</TableHead>
                <TableHead>Request Amount</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredInspections.length > 0 ? (
                filteredInspections.map((inspection) => (
                  <TableRow
                    key={inspection.inspection_id}
                    className="cursor-pointer hover:bg-muted transition-colors"
                    onClick={() => handleRowClick(inspection)}
                  >
                    <TableCell className="text-center">{inspection.inspection_id}</TableCell>
                    <TableCell>
                      <img
                        src={inspection.picture_url}
                        alt={inspection.item_inspected}
                        className="w-12 h-12 object-cover rounded"
                      />
                    </TableCell>
                    <TableCell>{inspection.item_inspected}</TableCell>
                    <TableCell className="text-center">{inspection.item_quantity}</TableCell>
                    <TableCell>{inspection.unit}</TableCell>
                    <TableCell className={`${getExpiryDateStyle(inspection.expiry_date)} rounded-md px-2 py-1 text-center`}>
                      {inspection.expiry_date}
                    </TableCell>
                    <TableCell onClick={(e) => e.stopPropagation()}>
                      <Select
                        onValueChange={(value) => handleRequestAmountChange(value, inspection.inspection_id)}
                        defaultValue={inspection.request_amount.toString()}
                      >
                        <SelectTrigger className="w-[100px]">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          {[0, 1, 2, 3, 4, 5].map((amount) => (
                            <SelectItem key={amount} value={amount.toString()}>
                              {amount}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} className="text-center">No matching results found</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      )}

      <Dialog open={showRequestPopup} onOpenChange={setShowRequestPopup}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Request List Preview</DialogTitle>
            <DialogDescription>
              Review the items to be requested below.
            </DialogDescription>
          </DialogHeader>
          <div
            ref={dialogContentRef}
            className="grid gap-4 py-4 max-h-[60vh] overflow-y-auto pr-4"
          >
            {requestList.map((item, index) => (
              <div key={item.inspection_id}>
                <div className="grid grid-cols-3 items-center gap-4">
                  <Label htmlFor={`item-${item.inspection_id}`}>{item.item_inspected}</Label>
                  <Input
                    id={`item-${item.inspection_id}`}
                    value={item.request_amount}
                    className="col-span-1"
                    readOnly
                  />
                  <span>{item.unit}</span>
                  <div className="col-span-3">
                    <Label htmlFor={`description-${item.inspection_id}`}>Description</Label>
                    <Textarea
                      id={`description-${item.inspection_id}`}
                      value={item.description}
                      className="mt-1 resize-none bg-transparent"
                      readOnly
                    />
                  </div>
                  <div className="col-span-3 mt-2">
                    <img
                      src={item.picture_url}
                      alt={item.item_inspected}
                      className="w-full h-48 object-cover rounded"
                    />
                  </div>
                </div>
                {index < requestList.length - 1 && <Separator className="my-4" />}
              </div>
            ))}
          </div>
          <DialogFooter>
            <Button onClick={handleSubmitRequest} disabled={isLoading}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Submit Request
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={!!selectedItem} onOpenChange={(open) => {
        if (!open) {
          setSelectedItem(null)
          setEditedItem(null)
          setHasChanges(false)
        }
      }}>
        <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle>Edit Inspection</DialogTitle>
            <DialogDescription>
              Make changes to the inspection details here. Click save when done.
            </DialogDescription>
          </DialogHeader>
          {editedItem && (
            <div className="grid gap-4 py-4">
              <div className="flex justify-center mb-4">
                <img
                  src={editedItem.picture_url}
                  alt={editedItem.item_inspected}
                  className="w-48 h-48 object-cover rounded"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="item_inspected">Item Inspected</Label>
                  <Input
                    id="item_inspected"
                    value={editedItem.item_inspected}
                    onChange={(e) => handleInputChange('item_inspected', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="item_quantity">Item Quantity</Label>
                  <Select
                    value={editedItem.item_quantity.toString()}
                    onValueChange={(value) => handleInputChange('item_quantity', parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select quantity" />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 4, 5, 10, 20, 30, 50].map((quantity) => (
                        <SelectItem key={quantity} value={quantity.toString()}>
                          {quantity}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="unit">Unit</Label>
                  <Select
                    value={editedItem.unit}
                    onValueChange={(value) => handleInputChange('unit', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select unit" />
                    </SelectTrigger>
                    <SelectContent>
                      {units.map((unit) => (
                        <SelectItem key={unit} value={unit}>
                          {unit}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="expiry_date">Expiry Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.expiry_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.expiry_date ? format(new Date(editedItem.expiry_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.expiry_date)}
                        onSelect={(date) => handleDateChange('expiry_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="next_inspection_date">Next Inspection Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.next_inspection_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.next_inspection_date ? format(new Date(editedItem.next_inspection_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.next_inspection_date)}
                        onSelect={(date) => handleDateChange('next_inspection_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="inspected_by">Inspected By</Label>
                  <Select
                    value={editedItem.inspected_by}
                    onValueChange={(value) => handleInputChange('inspected_by', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select inspector" />
                    </SelectTrigger>
                    <SelectContent>
                      {users.map((user) => (
                        <SelectItem key={user} value={user}>
                          {user}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">Status</Label>
                  <Select
                    value={editedItem.status}
                    onValueChange={(value) => handleInputChange('status', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      {statuses.map((status) => (
                        <SelectItem key={status} value={status}>
                          {status}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location">Location</Label>
                  <Select
                    value={editedItem.location}
                    onValueChange={(value) => handleInputChange('location', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select location" />
                    </SelectTrigger>
                    <SelectContent>
                      {locations.map((location) => (
                        <SelectItem key={location} value={location}>
                          {location}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2 col-span-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={editedItem.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    className="resize-none"
                  />
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            {hasChanges ? (
              <>
                <Button onClick={handleSave}>Save changes</Button>
                <Button variant="outline" onClick={() => {
                  setEditedItem(selectedItem)
                  setHasChanges(false)
                }}>
                  Cancel
                </Button>
              </>
            ) : (
              <Button onClick={() => {
                setSelectedItem(null)
                setEditedItem(null)
              }}>
                Close
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}








=V20===================================
npx shadcn@latest add "https://v0.dev/chat/b/b_9OsbM3MVv1x?token=eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..sId44ze9JtTImur1.jap-Krkv7BQVqySb4_63OMNo7uqRO-_aMp0Eakqefkli-hJk2TY92ezxgow.Cw7bCEH5AaKk0CKel0wiNQ"
=V20===================================
'use client'

import { useState, useEffect, useRef } from 'react'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Loader2, AlertCircle, CalendarIcon } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Calendar } from "@/components/ui/calendar"
import { format, differenceInDays } from "date-fns"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { cn } from "@/lib/utils"
import { Separator } from "@/components/ui/separator"
import { Textarea } from "@/components/ui/textarea"
import { supabase } from './createClient' // Assuming you have a Supabase client setup

type Inspection = {
  inspection_id: number
  picture_url: string
  item_inspected: string
  item_quantity: number
  unit: string
  expiry_date: string
  request_amount: number
  location: string
  inspection_date: string
  inspected_by: string
  kit_condition: string
  next_inspection_date: string
  status: string
  description: string
}

const initialDummyData: Inspection[] = [
  {
    inspection_id: 1,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Adhesive Bandages (Band-Aids)",
    item_quantity: 50,
    unit: "box",
    expiry_date: "2024-12-31",
    request_amount: 0,
    location: "Main Office",
    inspection_date: "2023-06-01",
    inspected_by: "John Doe",
    kit_condition: "Good",
    next_inspection_date: "2023-12-01",
    status: "Passed",
    description: "Small, flexible strips with an adhesive back and a gauze pad in the center, used to cover minor cuts, blisters, or abrasions to prevent infection and promote healing."
  },
  {
    inspection_id: 2,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Antiseptic Wipes",
    item_quantity: 30,
    unit: "pack",
    expiry_date: "2025-06-30",
    request_amount: 0,
    location: "Workshop",
    inspection_date: "2023-05-15",
    inspected_by: "Jane Smith",
    kit_condition: "Excellent",
    next_inspection_date: "2023-11-15",
    status: "Passed",
    description: "Pre-moistened towelettes containing antiseptic solutions, such as alcohol or iodine, used to disinfect wounds or clean skin before applying bandages."
  },
  {
    inspection_id: 3,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Gauze Pads",
    item_quantity: 20,
    unit: "pack",
    expiry_date: "2023-08-15",
    request_amount: 0,
    location: "Reception",
    inspection_date: "2023-06-10",
    inspected_by: "Mike Johnson",
    kit_condition: "Fair",
    next_inspection_date: "2023-09-10",
    status: "Needs Attention",
    description: "Sterile squares of cotton gauze used to cover larger wounds or burns, absorb excess blood or fluid, and protect the wound from contamination."
  },
  {
    inspection_id: 4,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Elastic Bandage (ACE Wrap)",
    item_quantity: 5,
    unit: "roll",
    expiry_date: "2024-10-31",
    request_amount: 0,
    location: "Gym",
    inspection_date: "2023-07-01",
    inspected_by: "Sarah Lee",
    kit_condition: "Good",
    next_inspection_date: "2024-01-01",
    status: "Passed",
    description: "A stretchable bandage used to wrap sprained joints, reduce swelling, or hold dressings in place, providing support and compression."
  },
  {
    inspection_id: 5,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Medical Adhesive Tape",
    item_quantity: 10,
    unit: "roll",
    expiry_date: "2025-03-31",
    request_amount: 0,
    location: "Main Office",
    inspection_date: "2023-06-20",
    inspected_by: "John Doe",
    kit_condition: "Excellent",
    next_inspection_date: "2023-12-20",
    status: "Passed",
    description: "A sticky tape designed to secure bandages or gauze pads over wounds without irritating the skin, often breathable and easy to tear."
  },
  {
    inspection_id: 6,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Tweezers",
    item_quantity: 3,
    unit: "piece",
    expiry_date: "2026-12-31",
    request_amount: 0,
    location: "Workshop",
    inspection_date: "2023-05-25",
    inspected_by: "Jane Smith",
    kit_condition: "Good",
    next_inspection_date: "2023-11-25",
    status: "Passed",
    description: "Small metal tool with pointed tips, used to remove debris, such as splinters, glass, or ticks, from the skin."
  },
  {
    inspection_id: 7,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Scissors",
    item_quantity: 2,
    unit: "piece",
    expiry_date: "2026-12-31",
    request_amount: 0,
    location: "Reception",
    inspection_date: "2023-06-15",
    inspected_by: "Mike Johnson",
    kit_condition: "Good",
    next_inspection_date: "2023-12-15",
    status: "Passed",
    description: "Used for cutting gauze, bandages, adhesive tape, or clothing in case of emergency when quick access to a wound is needed."
  },
  {
    inspection_id: 8,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "CPR Face Shield",
    item_quantity: 5,
    unit: "piece",
    expiry_date: "2025-09-30",
    request_amount: 0,
    location: "Gym",
    inspection_date: "2023-07-05",
    inspected_by: "Sarah Lee",
    kit_condition: "Excellent",
    next_inspection_date: "2024-01-05",
    status: "Passed",
    description: "A protective barrier used during CPR to provide rescue breaths without direct contact, reducing the risk of transmitting infections."
  },
  {
    inspection_id: 9,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Instant Cold Pack",
    item_quantity: 10,
    unit: "piece",
    expiry_date: "2024-08-31",
    request_amount: 0,
    location: "Main Office",
    inspection_date: "2023-06-25",
    inspected_by: "John Doe",
    kit_condition: "Good",
    next_inspection_date: "2023-12-25",
    status: "Passed",
    description: "A single-use, chemical pack that becomes cold when activated, used to reduce swelling, numb pain, and minimize bruising from injuries like sprains or strains."
  },
  {
    inspection_id: 10,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Sterile Gloves",
    item_quantity: 20,
    unit: "pair",
    expiry_date: "2025-05-31",
    request_amount: 0,
    location: "Workshop",
    inspection_date: "2023-05-30",
    inspected_by: "Jane Smith",
    kit_condition: "Excellent",
    next_inspection_date: "2023-11-30",
    status: "Passed",
    description: "Disposable gloves worn to protect both the rescuer and the patient from infection or contamination when treating open wounds or handling body fluids."
  }
]

const users = ["John Doe", "Jane Smith", "Mike Johnson", "Sarah Lee"]
const statuses = ["Passed", "Needs Attention", "Failed"]
const locations = ["Main Office", "Workshop", "Reception", "Gym"]
const units = ["box", "pack", "roll", "piece", "pair"]

export default function FirstAidInspectionPreview() {
  const [inspections, setInspections] = useState<Inspection[]>(initialDummyData)
  const [filteredInspections, setFilteredInspections] = useState<Inspection[]>(initialDummyData)
  const [searchQuery, setSearchQuery] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [selectedItem, setSelectedItem] = useState<Inspection | null>(null)
  const [editedItem, setEditedItem] = useState<Inspection | null>(null)
  const [hasChanges, setHasChanges] = useState(false)
  const [requestList, setRequestList] = useState<Inspection[]>([])
  const [showRequestPopup, setShowRequestPopup] = useState(false)
  const [warningMessage, setWarningMessage] = useState('')
  const dialogContentRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    setFilteredInspections(
      inspections.filter((inspection) =>
        Object.values(inspection).some(value =>
          value && value.toString().toLowerCase().includes(searchQuery.toLowerCase())
        )
      )
    )
  }, [searchQuery, inspections])

  const handleRequestAmountChange = (value: string, inspectionId: number) => {
    const updatedInspections = inspections.map(inspection =>
      inspection.inspection_id === inspectionId
        ? { ...inspection, request_amount: parseInt(value) }
        : inspection
    )
    setInspections(updatedInspections)
  }

  const handleRowClick = (inspection: Inspection) => {
    setSelectedItem(inspection)
    setEditedItem(inspection)
    setHasChanges(false)
  }

  const handleInputChange = (name: string, value: string | number) => {
    setEditedItem(prev => {
      if (!prev) return null
      const updatedItem = { ...prev, [name]: value }
      setHasChanges(JSON.stringify(updatedItem) !== JSON.stringify(selectedItem))
      return updatedItem
    })
  }

  const handleDateChange = (name: string, date: Date | undefined) => {
    if (date) {
      handleInputChange(name, format(date, 'yyyy-MM-dd'))
    }
  }

  const handleSave = () => {
    if (editedItem) {
      setInspections(prevInspections =>
        prevInspections.map(inspection =>
          inspection.inspection_id === editedItem.inspection_id ? editedItem : inspection
        )
      )
      setSelectedItem(null)
      setEditedItem(null)
      setHasChanges(false)
    }
  }

  const handlePreviewRequest = () => {
    const requests = inspections.filter(inspection => inspection.request_amount > 0)
    if (requests.length > 0) {
      setRequestList(requests)
      setShowRequestPopup(true)
      setWarningMessage('')
      console.log('Request List:', requests)
    } else {
      setWarningMessage('Request list is empty. Please add items to the request before previewing.')
      setShowRequestPopup(false)
    }
  }

  const handleSubmitRequest = async () => {
    setIsLoading(true)
    try {
      const { data, error } = await supabase
        .from('requests')
        .insert(requestList)

      if (error) throw error

      console.log('Request successfully submitted:', data)
      setShowRequestPopup(false)
      setRequestList([])
      setInspections(inspections.map(item => ({ ...item, request_amount: 0 })))
      setWarningMessage('Request submitted successfully!')
    } catch (err) {
      console.error('Failed to submit request:', err)
      setWarningMessage('Failed to submit request. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const getExpiryDateStyle = (expiryDate: string) => {
    const today = new Date()
    const expiry = new Date(expiryDate)
    const daysUntilExpiry = differenceInDays(expiry, today)

    if (daysUntilExpiry < 0) {
      return 'bg-red-500 text-white'
    } else if (daysUntilExpiry <= 90) {
      return 'bg-orange-500 text-white'
    } else {
      return 'bg-green-500 text-black'
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6 text-center">First Aid Inspection List (Preview)</h1>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Search Inspections</CardTitle>
        </CardHeader>
        <CardContent>
          <Input
            type="text"
            placeholder="Search across all columns..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full"
          />
        </CardContent>
      </Card>

      {warningMessage && (
        <Alert variant={warningMessage.includes('successfully') ? 'default' : 'destructive'} className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Notification</AlertTitle>
          <AlertDescription>{warningMessage}</AlertDescription>
        </Alert>
      )}

      <div className="flex justify-end mb-6">
        <Button onClick={handlePreviewRequest}>Preview Request List</Button>
      </div>

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      ) : (
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="text-center">Item ID</TableHead>
                <TableHead>Picture</TableHead>
                <TableHead>Item Inspected</TableHead>
                <TableHead className="text-center">Item Quantity</TableHead>
                <TableHead>Unit</TableHead>
                <TableHead className="text-center">Expiry Date</TableHead>
                <TableHead>Request Amount</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredInspections.length > 0 ? (
                filteredInspections.map((inspection) => (
                  <TableRow
                    key={inspection.inspection_id}
                    className="cursor-pointer hover:bg-muted transition-colors"
                    onClick={() => handleRowClick(inspection)}
                  >
                    <TableCell className="text-center">{inspection.inspection_id}</TableCell>
                    <TableCell>
                      <img
                        src={inspection.picture_url}
                        alt={inspection.item_inspected}
                        className="w-12 h-12 object-cover rounded"
                      />
                    </TableCell>
                    <TableCell>{inspection.item_inspected}</TableCell>
                    <TableCell className="text-center">{inspection.item_quantity}</TableCell>
                    <TableCell>{inspection.unit}</TableCell>
                    <TableCell className={`${getExpiryDateStyle(inspection.expiry_date)} rounded-md px-2 py-1 text-center`}>
                      {inspection.expiry_date}
                    </TableCell>
                    <TableCell onClick={(e) => e.stopPropagation()}>
                      <Select
                        onValueChange={(value) => handleRequestAmountChange(value, inspection.inspection_id)}
                        defaultValue={inspection.request_amount.toString()}
                      >
                        <SelectTrigger className="w-[100px]">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          {[0, 1, 2, 3, 4, 5].map((amount) => (
                            <SelectItem key={amount} value={amount.toString()}>
                              {amount}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} className="text-center">No matching results found</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      )}

      <Dialog open={showRequestPopup} onOpenChange={setShowRequestPopup}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Request List Preview</DialogTitle>
            <DialogDescription>
              Review the items to be requested below.
            </DialogDescription>
          </DialogHeader>
          <div
            ref={dialogContentRef}
            className="grid gap-4 py-4 max-h-[60vh] overflow-y-auto pr-4"
          >
            {requestList.map((item, index) => (
              <div key={item.inspection_id}>
                <div className="grid grid-cols-3 items-center gap-4">
                  <Label htmlFor={`item-${item.inspection_id}`}>{item.item_inspected}</Label>
                  <Input
                    id={`item-${item.inspection_id}`}
                    value={item.request_amount}
                    className="col-span-1"
                    readOnly
                  />
                  <span>{item.unit}</span>
                  <div className="col-span-3">
                    <Label htmlFor={`description-${item.inspection_id}`}>Description</Label>
                    <Textarea
                      id={`description-${item.inspection_id}`}
                      value={item.description}
                      className="mt-1 resize-none bg-transparent"
                      readOnly
                    />
                  </div>
                  <div className="col-span-3 mt-2">
                    <img
                      src={item.picture_url}
                      alt={item.item_inspected}
                      className="w-full h-48 object-cover rounded"
                    />
                  </div>
                </div>
                {index < requestList.length - 1 && <Separator className="my-4" />}
              </div>
            ))}
          </div>
          <DialogFooter>
            <Button onClick={handleSubmitRequest} disabled={isLoading}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Submit Request
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={!!selectedItem} onOpenChange={(open) => {
        if (!open) {
          setSelectedItem(null)
          setEditedItem(null)
          setHasChanges(false)
        }
      }}>
        <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle>Edit Inspection</DialogTitle>
            <DialogDescription>
              Make changes to the inspection details here. Click save when done.
            </DialogDescription>
          </DialogHeader>
          {editedItem && (
            <div className="grid gap-4 py-4">
              <div className="flex justify-center mb-4">
                <img
                  src={editedItem.picture_url}
                  alt={editedItem.item_inspected}
                  className="w-48 h-48 object-cover rounded"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="item_inspected">Item Inspected</Label>
                  <Input
                    id="item_inspected"
                    value={editedItem.item_inspected}
                    onChange={(e) => handleInputChange('item_inspected', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="item_quantity">Item Quantity</Label>
                  <Select
                    value={editedItem.item_quantity.toString()}
                    onValueChange={(value) => handleInputChange('item_quantity', parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select quantity" />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 4, 5, 10, 20, 30, 50].map((quantity) => (
                        <SelectItem key={quantity} value={quantity.toString()}>
                          {quantity}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="unit">Unit</Label>
                  <Select
                    value={editedItem.unit}
                    onValueChange={(value) => handleInputChange('unit', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select unit" />
                    </SelectTrigger>
                    <SelectContent>
                      {units.map((unit) => (
                        <SelectItem key={unit} value={unit}>
                          {unit}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="expiry_date">Expiry Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.expiry_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.expiry_date ? format(new Date(editedItem.expiry_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.expiry_date)}
                        onSelect={(date) => handleDateChange('expiry_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="next_inspection_date">Next Inspection Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.next_inspection_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.next_inspection_date ? format(new Date(editedItem.next_inspection_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.next_inspection_date)}
                        onSelect={(date) => handleDateChange('next_inspection_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="inspected_by">Inspected By</Label>
                  <Select
                    value={editedItem.inspected_by}
                    onValueChange={(value) => handleInputChange('inspected_by', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select inspector" />
                    </SelectTrigger>
                    <SelectContent>
                      {users.map((user) => (
                        <SelectItem key={user} value={user}>
                          {user}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">Status</Label>
                  <Select
                    value={editedItem.status}
                    onValueChange={(value) => handleInputChange('status', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      {statuses.map((status) => (
                        <SelectItem key={status} value={status}>
                          {status}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location">Location</Label>
                  <Select
                    value={editedItem.location}
                    onValueChange={(value) => handleInputChange('location', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select location" />
                    </SelectTrigger>
                    <SelectContent>
                      {locations.map((location) => (
                        <SelectItem key={location} value={location}>
                          {location}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2 col-span-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={editedItem.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    className="resize-none"
                  />
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            {hasChanges ? (
              <>
                <Button onClick={handleSave}>Save changes</Button>
                <Button variant="outline" onClick={() => {
                  setEditedItem(selectedItem)
                  setHasChanges(false)
                }}>
                  Cancel
                </Button>
              </>
            ) : (
              <Button onClick={() => {
                setSelectedItem(null)
                setEditedItem(null)
              }}>
                Close
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}













=V19===================================
npx shadcn@latest add "https://v0.dev/chat/b/b_9OsbM3MVv1x?token=eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..sId44ze9JtTImur1.jap-Krkv7BQVqySb4_63OMNo7uqRO-_aMp0Eakqefkli-hJk2TY92ezxgow.Cw7bCEH5AaKk0CKel0wiNQ"
=V19===================================
'use client'

import { useState, useEffect, useRef } from 'react'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Loader2, AlertCircle, CalendarIcon } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Calendar } from "@/components/ui/calendar"
import { format, differenceInDays } from "date-fns"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { cn } from "@/lib/utils"
import { Separator } from "@/components/ui/separator"
import { Textarea } from "@/components/ui/textarea"
import { supabase } from './createClient' // Assuming you have a Supabase client setup

type Inspection = {
  inspection_id: number
  picture_url: string
  item_inspected: string
  item_quantity: number
  unit: string
  expiry_date: string
  request_amount: number
  location: string
  inspection_date: string
  inspected_by: string
  kit_condition: string
  next_inspection_date: string
  status: string
  description: string
}

const initialDummyData: Inspection[] = [
  {
    inspection_id: 1,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Adhesive Bandages (Band-Aids)",
    item_quantity: 50,
    unit: "box",
    expiry_date: "2024-12-31",
    request_amount: 0,
    location: "Main Office",
    inspection_date: "2023-06-01",
    inspected_by: "John Doe",
    kit_condition: "Good",
    next_inspection_date: "2023-12-01",
    status: "Passed",
    description: "Small, flexible strips with an adhesive back and a gauze pad in the center, used to cover minor cuts, blisters, or abrasions to prevent infection and promote healing."
  },
  {
    inspection_id: 2,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Antiseptic Wipes",
    item_quantity: 30,
    unit: "pack",
    expiry_date: "2025-06-30",
    request_amount: 0,
    location: "Workshop",
    inspection_date: "2023-05-15",
    inspected_by: "Jane Smith",
    kit_condition: "Excellent",
    next_inspection_date: "2023-11-15",
    status: "Passed",
    description: "Pre-moistened towelettes containing antiseptic solutions, such as alcohol or iodine, used to disinfect wounds or clean skin before applying bandages."
  },
  {
    inspection_id: 3,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Gauze Pads",
    item_quantity: 20,
    unit: "pack",
    expiry_date: "2023-08-15",
    request_amount: 0,
    location: "Reception",
    inspection_date: "2023-06-10",
    inspected_by: "Mike Johnson",
    kit_condition: "Fair",
    next_inspection_date: "2023-09-10",
    status: "Needs Attention",
    description: "Sterile squares of cotton gauze used to cover larger wounds or burns, absorb excess blood or fluid, and protect the wound from contamination."
  },
  {
    inspection_id: 4,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Elastic Bandage (ACE Wrap)",
    item_quantity: 5,
    unit: "roll",
    expiry_date: "2024-10-31",
    request_amount: 0,
    location: "Gym",
    inspection_date: "2023-07-01",
    inspected_by: "Sarah Lee",
    kit_condition: "Good",
    next_inspection_date: "2024-01-01",
    status: "Passed",
    description: "A stretchable bandage used to wrap sprained joints, reduce swelling, or hold dressings in place, providing support and compression."
  },
  {
    inspection_id: 5,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Medical Adhesive Tape",
    item_quantity: 10,
    unit: "roll",
    expiry_date: "2025-03-31",
    request_amount: 0,
    location: "Main Office",
    inspection_date: "2023-06-20",
    inspected_by: "John Doe",
    kit_condition: "Excellent",
    next_inspection_date: "2023-12-20",
    status: "Passed",
    description: "A sticky tape designed to secure bandages or gauze pads over wounds without irritating the skin, often breathable and easy to tear."
  },
  {
    inspection_id: 6,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Tweezers",
    item_quantity: 3,
    unit: "piece",
    expiry_date: "2026-12-31",
    request_amount: 0,
    location: "Workshop",
    inspection_date: "2023-05-25",
    inspected_by: "Jane Smith",
    kit_condition: "Good",
    next_inspection_date: "2023-11-25",
    status: "Passed",
    description: "Small metal tool with pointed tips, used to remove debris, such as splinters, glass, or ticks, from the skin."
  },
  {
    inspection_id: 7,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Scissors",
    item_quantity: 2,
    unit: "piece",
    expiry_date: "2026-12-31",
    request_amount: 0,
    location: "Reception",
    inspection_date: "2023-06-15",
    inspected_by: "Mike Johnson",
    kit_condition: "Good",
    next_inspection_date: "2023-12-15",
    status: "Passed",
    description: "Used for cutting gauze, bandages, adhesive tape, or clothing in case of emergency when quick access to a wound is needed."
  },
  {
    inspection_id: 8,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "CPR Face Shield",
    item_quantity: 5,
    unit: "piece",
    expiry_date: "2025-09-30",
    request_amount: 0,
    location: "Gym",
    inspection_date: "2023-07-05",
    inspected_by: "Sarah Lee",
    kit_condition: "Excellent",
    next_inspection_date: "2024-01-05",
    status: "Passed",
    description: "A protective barrier used during CPR to provide rescue breaths without direct contact, reducing the risk of transmitting infections."
  },
  {
    inspection_id: 9,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Instant Cold Pack",
    item_quantity: 10,
    unit: "piece",
    expiry_date: "2024-08-31",
    request_amount: 0,
    location: "Main Office",
    inspection_date: "2023-06-25",
    inspected_by: "John Doe",
    kit_condition: "Good",
    next_inspection_date: "2023-12-25",
    status: "Passed",
    description: "A single-use, chemical pack that becomes cold when activated, used to reduce swelling, numb pain, and minimize bruising from injuries like sprains or strains."
  },
  {
    inspection_id: 10,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Sterile Gloves",
    item_quantity: 20,
    unit: "pair",
    expiry_date: "2025-05-31",
    request_amount: 0,
    location: "Workshop",
    inspection_date: "2023-05-30",
    inspected_by: "Jane Smith",
    kit_condition: "Excellent",
    next_inspection_date: "2023-11-30",
    status: "Passed",
    description: "Disposable gloves worn to protect both the rescuer and the patient from infection or contamination when treating open wounds or handling body fluids."
  }
]

const users = ["John Doe", "Jane Smith", "Mike Johnson", "Sarah Lee"]
const statuses = ["Passed", "Needs Attention", "Failed"]
const locations = ["Main Office", "Workshop", "Reception", "Gym"]
const units = ["box", "pack", "roll", "piece", "pair"]

export default function FirstAidInspectionPreview() {
  const [inspections, setInspections] = useState<Inspection[]>(initialDummyData)
  const [filteredInspections, setFilteredInspections] = useState<Inspection[]>(initialDummyData)
  const [searchQuery, setSearchQuery] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [selectedItem, setSelectedItem] = useState<Inspection | null>(null)
  const [editedItem, setEditedItem] = useState<Inspection | null>(null)
  const [hasChanges, setHasChanges] = useState(false)
  const [requestList, setRequestList] = useState<Inspection[]>([])
  const [showRequestPopup, setShowRequestPopup] = useState(false)
  const [warningMessage, setWarningMessage] = useState('')
  const dialogContentRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    setFilteredInspections(
      inspections.filter((inspection) => 
        Object.values(inspection).some(value => 
          value && value.toString().toLowerCase().includes(searchQuery.toLowerCase())
        )
      )
    )
  }, [searchQuery, inspections])

  const handleRequestAmountChange = (value: string, inspectionId: number) => {
    const updatedInspections = inspections.map(inspection => 
      inspection.inspection_id === inspectionId 
        ? { ...inspection, request_amount: parseInt(value) } 
        : inspection
    )
    setInspections(updatedInspections)
  }

  const handleRowClick = (inspection: Inspection) => {
    setSelectedItem(inspection)
    setEditedItem(inspection)
    setHasChanges(false)
  }

  const handleInputChange = (name: string, value: string | number) => {
    setEditedItem(prev => {
      if (!prev) return null
      const updatedItem = { ...prev, [name]: value }
      setHasChanges(JSON.stringify(updatedItem) !== JSON.stringify(selectedItem))
      return updatedItem
    })
  }

  const handleDateChange = (name: string, date: Date | undefined) => {
    if (date) {
      handleInputChange(name, format(date, 'yyyy-MM-dd'))
    }
  }

  const handleSave = () => {
    if (editedItem) {
      setInspections(prevInspections => 
        prevInspections.map(inspection => 
          inspection.inspection_id === editedItem.inspection_id ? editedItem : inspection
        )
      )
      setSelectedItem(null)
      setEditedItem(null)
      setHasChanges(false)
    }
  }

  const handlePreviewRequest = () => {
    const requests = inspections.filter(inspection => inspection.request_amount > 0)
    if (requests.length > 0) {
      setRequestList(requests)
      setShowRequestPopup(true)
      setWarningMessage('')
      console.log('Request List:', requests)
    } else {
      setWarningMessage('Request list is empty. Please add items to the request before previewing.')
      setShowRequestPopup(false)
    }
  }

  const handleSubmitRequest = async () => {
    setIsLoading(true)
    try {
      const { data, error } = await supabase
        .from('requests')
        .insert(requestList)

      if (error) throw error

      console.log('Request successfully submitted:', data)
      setShowRequestPopup(false)
      setRequestList([])
      setInspections(inspections.map(item => ({ ...item, request_amount: 0 })))
      setWarningMessage('Request submitted successfully!')
    } catch (err) {
      console.error('Failed to submit request:', err)
      setWarningMessage('Failed to submit request. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const getExpiryDateStyle = (expiryDate: string) => {
    const today = new Date()
    const expiry = new Date(expiryDate)
    const daysUntilExpiry = differenceInDays(expiry, today)

    if (daysUntilExpiry < 0) {
      return 'bg-red-500 text-white'
    } else if (daysUntilExpiry <= 90) {
      return 'bg-orange-500 text-white'
    } else {
      return 'bg-green-500 text-black'
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6 text-center">First Aid Inspection List (Preview)</h1>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Search Inspections</CardTitle>
        </CardHeader>
        <CardContent>
          <Input 
            type="text" 
            placeholder="Search across all columns..." 
            value={searchQuery} 
            onChange={(e) => setSearchQuery(e.target.value)} 
            className="w-full"
          />
        </CardContent>
      </Card>

      {warningMessage && (
        <Alert variant={warningMessage.includes('successfully') ? 'default' : 'destructive'} className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Notification</AlertTitle>
          <AlertDescription>{warningMessage}</AlertDescription>
        </Alert>
      )}

      <div className="flex justify-end mb-6">
        <Button onClick={handlePreviewRequest}>Preview Request List</Button>
      </div>

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      ) : (
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="text-center">Item ID</TableHead>
                <TableHead>Picture</TableHead>
                <TableHead>Item Inspected</TableHead>
                <TableHead className="text-center">Item Quantity</TableHead>
                <TableHead>Unit</TableHead>
                <TableHead className="text-center">Expiry Date</TableHead>
                <TableHead>Request Amount</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredInspections.length > 0 ? (
                filteredInspections.map((inspection) => (
                  <TableRow 
                    key={inspection.inspection_id}
                    className="cursor-pointer hover:bg-muted transition-colors"
                    onClick={() => handleRowClick(inspection)}
                  >
                    <TableCell className="text-center">{inspection.inspection_id}</TableCell>
                    <TableCell>
                      <img 
                        src={inspection.picture_url} 
                        alt={inspection.item_inspected} 
                        className="w-12 h-12 object-cover rounded"
                      />
                    </TableCell>
                    <TableCell>{inspection.item_inspected}</TableCell>
                    <TableCell className="text-center">{inspection.item_quantity}</TableCell>
                    <TableCell>{inspection.unit}</TableCell>
                    <TableCell className={`${getExpiryDateStyle(inspection.expiry_date)} rounded-md px-2 py-1 text-center`}>
                      {inspection.expiry_date}
                    </TableCell>
                    <TableCell onClick={(e) => e.stopPropagation()}>
                      <Select
                        onValueChange={(value) => handleRequestAmountChange(value, inspection.inspection_id)}
                        defaultValue={inspection.request_amount.toString()}
                      >
                        <SelectTrigger className="w-[100px]">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          {[0, 1, 2, 3, 4, 5].map((amount) => (
                            <SelectItem key={amount} value={amount.toString()}>
                              {amount}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} className="text-center">No matching results found</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      )}

      <Dialog open={showRequestPopup} onOpenChange={setShowRequestPopup}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Request List Preview</DialogTitle>
            <DialogDescription>
              Review the items to be requested below.
            </DialogDescription>
          </DialogHeader>
          <div 
            ref={dialogContentRef}
            className="grid gap-4 py-4 max-h-[60vh] overflow-y-auto pr-4"
          >
            {requestList.map((item, index) => (
              <div key={item.inspection_id}>
                <div className="grid grid-cols-3 items-center gap-4">
                  <Label htmlFor={`item-${item.inspection_id}`}>{item.item_inspected}</Label>
                  <Input
                    id={`item-${item.inspection_id}`}
                    value={item.request_amount}
                    className="col-span-1"
                    readOnly
                  />
                  <span>{item.unit}</span>
                  <div className="col-span-3">
                    <Label htmlFor={`description-${item.inspection_id}`}>Description</Label>
                    <Textarea
                      id={`description-${item.inspection_id}`}
                      value={item.description}
                      className="mt-1 resize-none bg-transparent"
                      readOnly
                    />
                  </div>
                  <div className="col-span-3 mt-2">
                    <img 
                      src={item.picture_url} 
                      alt={item.item_inspected} 
                      className="w-full h-48 object-cover rounded"
                    />
                  </div>
                </div>
                {index < requestList.length - 1 && <Separator className="my-4" />}
              </div>
            ))}
          </div>
          <DialogFooter>
            <Button onClick={handleSubmitRequest} disabled={isLoading}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Submit Request
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={!!selectedItem} onOpenChange={(open) => {
        if (!open) {
          setSelectedItem(null)
          setEditedItem(null)
          setHasChanges(false)
        }
      }}>
        <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle>Edit Inspection</DialogTitle>
            <DialogDescription>
              Make changes to the inspection details here. Click save when you're done.
            </DialogDescription>
          </DialogHeader>
          {editedItem && (
            <div className="grid gap-4 py-4">
              <div className="flex justify-center mb-4">
                <img 
                  src={editedItem.picture_url}
                  alt={editedItem.item_inspected}
                  className="w-48 h-48 object-cover rounded"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="item_inspected">Item Inspected</Label>
                  <Input
                    id="item_inspected"
                    value={editedItem.item_inspected}
                    onChange={(e) => handleInputChange('item_inspected', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="item_quantity">Item Quantity</Label>
                  <Select
                    value={editedItem.item_quantity.toString()}
                    onValueChange={(value) => handleInputChange('item_quantity', parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select quantity" />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 4, 5, 10, 20, 30, 50].map((quantity) => (
                        <SelectItem key={quantity} value={quantity.toString()}>
                          {quantity}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="unit">Unit</Label>
                  <Select
                    value={editedItem.unit}
                    onValueChange={(value) => handleInputChange('unit', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select unit" />
                    </SelectTrigger>
                    <SelectContent>
                      {units.map((unit) => (
                        <SelectItem key={unit} value={unit}>
                          {unit}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="expiry_date">Expiry Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.expiry_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.expiry_date ? format(new Date(editedItem.expiry_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.expiry_date)}
                        onSelect={(date) => handleDateChange('expiry_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="next_inspection_date">Next Inspection Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.next_inspection_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.next_inspection_date ? format(new Date(editedItem.next_inspection_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.next_inspection_date)}
                        onSelect={(date) => handleDateChange('next_inspection_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="inspected_by">Inspected By</Label>
                  <Select
                    value={editedItem.inspected_by}
                    onValueChange={(value) => handleInputChange('inspected_by', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select inspector" />
                    </SelectTrigger>
                    <SelectContent>
                      {users.map((user) => (
                        <SelectItem key={user} value={user}>
                          {user}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">Status</Label>
                  <Select
                    value={editedItem.status}
                    onValueChange={(value) => handleInputChange('status', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      {statuses.map((status) => (
                        <SelectItem key={status} value={status}>
                          {status}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location">Location</Label>
                  <Select
                    value={editedItem.location}
                    onValueChange={(value) => handleInputChange('location', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select location" />
                    </SelectTrigger>
                    <SelectContent>
                      {locations.map((location) => (
                        <SelectItem key={location} value={location}>
                          {location}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2 col-span-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={editedItem.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    className="resize-none"
                  />
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            {hasChanges ? (
              <>
                <Button onClick={handleSave}>Save changes</Button>
                <Button variant="outline" onClick={() => {
                  setEditedItem(selectedItem)
                  setHasChanges(false)
                }}>
                  Cancel
                </Button>
              </>
            ) : (
              <Button onClick={() => {
                setSelectedItem(null)
                setEditedItem(null)
              }}>
                Close
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}


=V18===================================
npx shadcn@latest add "https://v0.dev/chat/b/b_2OR7GDjjqQc?token=eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..JTpMDkzOoXvCoJWt.yNTTmj2YbwKLQwfNGWC-QqjSsmPLiTilpZJdOJ74aa7cx-rtCD_RU9Hy8C8.L5l9jUxSYIdRX2-2899SHQ"
=V18===================================
'use client'

import { useState, useEffect, useRef } from 'react'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Loader2, AlertCircle, CalendarIcon } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Calendar } from "@/components/ui/calendar"
import { format, differenceInDays } from "date-fns"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { cn } from "@/lib/utils"
import { Separator } from "@/components/ui/separator"
import { Textarea } from "@/components/ui/textarea"
import { supabase } from './createClient' // Assuming you have a Supabase client setup

type Inspection = {
  inspection_id: number
  picture_url: string
  item_inspected: string
  item_quantity: number
  unit: string
  expiry_date: string
  request_amount: number
  location: string
  inspection_date: string
  inspected_by: string
  kit_condition: string
  next_inspection_date: string
  status: string
  description: string
}

const initialDummyData: Inspection[] = [
  {
    inspection_id: 1,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Adhesive Bandages (Band-Aids)",
    item_quantity: 50,
    unit: "box",
    expiry_date: "2024-12-31",
    request_amount: 0,
    location: "Main Office",
    inspection_date: "2023-06-01",
    inspected_by: "John Doe",
    kit_condition: "Good",
    next_inspection_date: "2023-12-01",
    status: "Passed",
    description: "Small, flexible strips with an adhesive back and a gauze pad in the center, used to cover minor cuts, blisters, or abrasions to prevent infection and promote healing."
  },
  {
    inspection_id: 2,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Antiseptic Wipes",
    item_quantity: 30,
    unit: "pack",
    expiry_date: "2025-06-30",
    request_amount: 0,
    location: "Workshop",
    inspection_date: "2023-05-15",
    inspected_by: "Jane Smith",
    kit_condition: "Excellent",
    next_inspection_date: "2023-11-15",
    status: "Passed",
    description: "Pre-moistened towelettes containing antiseptic solutions, such as alcohol or iodine, used to disinfect wounds or clean skin before applying bandages."
  },
  {
    inspection_id: 3,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Gauze Pads",
    item_quantity: 20,
    unit: "pack",
    expiry_date: "2023-08-15",
    request_amount: 0,
    location: "Reception",
    inspection_date: "2023-06-10",
    inspected_by: "Mike Johnson",
    kit_condition: "Fair",
    next_inspection_date: "2023-09-10",
    status: "Needs Attention",
    description: "Sterile squares of cotton gauze used to cover larger wounds or burns, absorb excess blood or fluid, and protect the wound from contamination."
  },
  {
    inspection_id: 4,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Elastic Bandage (ACE Wrap)",
    item_quantity: 5,
    unit: "roll",
    expiry_date: "2024-10-31",
    request_amount: 0,
    location: "Gym",
    inspection_date: "2023-07-01",
    inspected_by: "Sarah Lee",
    kit_condition: "Good",
    next_inspection_date: "2024-01-01",
    status: "Passed",
    description: "A stretchable bandage used to wrap sprained joints, reduce swelling, or hold dressings in place, providing support and compression."
  },
  {
    inspection_id: 5,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Medical Adhesive Tape",
    item_quantity: 10,
    unit: "roll",
    expiry_date: "2025-03-31",
    request_amount: 0,
    location: "Main Office",
    inspection_date: "2023-06-20",
    inspected_by: "John Doe",
    kit_condition: "Excellent",
    next_inspection_date: "2023-12-20",
    status: "Passed",
    description: "A sticky tape designed to secure bandages or gauze pads over wounds without irritating the skin, often breathable and easy to tear."
  },
  {
    inspection_id: 6,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Tweezers",
    item_quantity: 3,
    unit: "piece",
    expiry_date: "2026-12-31",
    request_amount: 0,
    location: "Workshop",
    inspection_date: "2023-05-25",
    inspected_by: "Jane Smith",
    kit_condition: "Good",
    next_inspection_date: "2023-11-25",
    status: "Passed",
    description: "Small metal tool with pointed tips, used to remove debris, such as splinters, glass, or ticks, from the skin."
  },
  {
    inspection_id: 7,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Scissors",
    item_quantity: 2,
    unit: "piece",
    expiry_date: "2026-12-31",
    request_amount: 0,
    location: "Reception",
    inspection_date: "2023-06-15",
    inspected_by: "Mike Johnson",
    kit_condition: "Good",
    next_inspection_date: "2023-12-15",
    status: "Passed",
    description: "Used for cutting gauze, bandages, adhesive tape, or clothing in case of emergency when quick access to a wound is needed."
  },
  {
    inspection_id: 8,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "CPR Face Shield",
    item_quantity: 5,
    unit: "piece",
    expiry_date: "2025-09-30",
    request_amount: 0,
    location: "Gym",
    inspection_date: "2023-07-05",
    inspected_by: "Sarah Lee",
    kit_condition: "Excellent",
    next_inspection_date: "2024-01-05",
    status: "Passed",
    description: "A protective barrier used during CPR to provide rescue breaths without direct contact, reducing the risk of transmitting infections."
  },
  {
    inspection_id: 9,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Instant Cold Pack",
    item_quantity: 10,
    unit: "piece",
    expiry_date: "2024-08-31",
    request_amount: 0,
    location: "Main Office",
    inspection_date: "2023-06-25",
    inspected_by: "John Doe",
    kit_condition: "Good",
    next_inspection_date: "2023-12-25",
    status: "Passed",
    description: "A single-use, chemical pack that becomes cold when activated, used to reduce swelling, numb pain, and minimize bruising from injuries like sprains or strains."
  },
  {
    inspection_id: 10,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Sterile Gloves",
    item_quantity: 20,
    unit: "pair",
    expiry_date: "2025-05-31",
    request_amount: 0,
    location: "Workshop",
    inspection_date: "2023-05-30",
    inspected_by: "Jane Smith",
    kit_condition: "Excellent",
    next_inspection_date: "2023-11-30",
    status: "Passed",
    description: "Disposable gloves worn to protect both the rescuer and the patient from infection or contamination when treating open wounds or handling body fluids."
  }
]

const users = ["John Doe", "Jane Smith", "Mike Johnson", "Sarah Lee"]
const statuses = ["Passed", "Needs Attention", "Failed"]
const locations = ["Main Office", "Workshop", "Reception", "Gym"]
const units = ["box", "pack", "roll", "piece", "pair"]

export default function FirstAidInspectionPreview() {
  const [inspections, setInspections] = useState<Inspection[]>(initialDummyData)
  const [filteredInspections, setFilteredInspections] = useState<Inspection[]>(initialDummyData)
  const [searchQuery, setSearchQuery] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [selectedItem, setSelectedItem] = useState<Inspection | null>(null)
  const [editedItem, setEditedItem] = useState<Inspection | null>(null)
  const [hasChanges, setHasChanges] = useState(false)
  const [requestList, setRequestList] = useState<Inspection[]>([])
  const [showRequestPopup, setShowRequestPopup] = useState(false)
  const [warningMessage, setWarningMessage] = useState('')
  const dialogContentRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    setFilteredInspections(
      inspections.filter((inspection) => 
        Object.values(inspection).some(value => 
          value && value.toString().toLowerCase().includes(searchQuery.toLowerCase())
        )
      )
    )
  }, [searchQuery, inspections])

  const handleRequestAmountChange = (value: string, inspectionId: number) => {
    const updatedInspections = inspections.map(inspection => 
      inspection.inspection_id === inspectionId 
        ? { ...inspection, request_amount: parseInt(value) } 
        : inspection
    )
    setInspections(updatedInspections)
  }

  const handleRowClick = (inspection: Inspection) => {
    setSelectedItem(inspection)
    setEditedItem(inspection)
    setHasChanges(false)
  }

  const handleInputChange = (name: string, value: string | number) => {
    setEditedItem(prev => {
      if (!prev) return null
      const updatedItem = { ...prev, [name]: value }
      setHasChanges(JSON.stringify(updatedItem) !== JSON.stringify(selectedItem))
      return updatedItem
    })
  }

  const handleDateChange = (name: string, date: Date | undefined) => {
    if (date) {
      handleInputChange(name, format(date, 'yyyy-MM-dd'))
    }
  }

  const handleSave = () => {
    if (editedItem) {
      setInspections(prevInspections => 
        prevInspections.map(inspection => 
          inspection.inspection_id === editedItem.inspection_id ? editedItem : inspection
        )
      )
      setSelectedItem(null)
      setEditedItem(null)
      setHasChanges(false)
    }
  }

  const handlePreviewRequest = () => {
    const requests = inspections.filter(inspection => inspection.request_amount > 0)
    if (requests.length > 0) {
      setRequestList(requests)
      setShowRequestPopup(true)
      setWarningMessage('')
      console.log('Request List:', requests)
    } else {
      setWarningMessage('Request list is empty. Please add items to the request before previewing.')
      setShowRequestPopup(false)
    }
  }

  const handleSubmitRequest = async () => {
    setIsLoading(true)
    try {
      const { data, error } = await supabase
        .from('requests')
        .insert(requestList)

      if (error) throw error

      console.log('Request successfully submitted:', data)
      setShowRequestPopup(false)
      setRequestList([])
      setInspections(inspections.map(item => ({ ...item, request_amount: 0 })))
      setWarningMessage('Request submitted successfully!')
    } catch (err) {
      console.error('Failed to submit request:', err)
      setWarningMessage('Failed to submit request. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const getExpiryDateStyle = (expiryDate: string) => {
    const today = new Date()
    const expiry = new Date(expiryDate)
    const daysUntilExpiry = differenceInDays(expiry, today)

    if (daysUntilExpiry < 0) {
      return 'bg-red-500 text-white'
    } else if (daysUntilExpiry <= 90) {
      return 'bg-orange-500 text-white'
    } else {
      return 'bg-green-500 text-black'
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6 text-center">First Aid Inspection List (Preview)</h1>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Search Inspections</CardTitle>
        </CardHeader>
        <CardContent>
          <Input 
            type="text" 
            placeholder="Search across all columns..." 
            value={searchQuery} 
            onChange={(e) => setSearchQuery(e.target.value)} 
            className="w-full"
          />
        </CardContent>
      </Card>

      {warningMessage && (
        <Alert variant={warningMessage.includes('successfully') ? 'default' : 'destructive'} className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Notification</AlertTitle>
          <AlertDescription>{warningMessage}</AlertDescription>
        </Alert>
      )}

      <div className="flex justify-end mb-6">
        <Button onClick={handlePreviewRequest}>Preview Request List</Button>
      </div>

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      ) : (
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Item ID</TableHead>
                <TableHead>Picture</TableHead>
                <TableHead>Item Inspected</TableHead>
                <TableHead>Item Quantity</TableHead>
                <TableHead>Unit</TableHead>
                <TableHead>Expiry Date</TableHead>
                <TableHead>Request Amount</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredInspections.length > 0 ? (
                filteredInspections.map((inspection) => (
                  <TableRow 
                    key={inspection.inspection_id}
                    className="cursor-pointer hover:bg-muted transition-colors"
                    onClick={() => handleRowClick(inspection)}
                  >
                    <TableCell>{inspection.inspection_id}</TableCell>
                    <TableCell>
                      <img 
                        src={inspection.picture_url} 
                        alt={inspection.item_inspected} 
                        className="w-12 h-12 object-cover rounded"
                      />
                    </TableCell>
                    <TableCell>{inspection.item_inspected}</TableCell>
                    <TableCell>{inspection.item_quantity}</TableCell>
                    <TableCell>{inspection.unit}</TableCell>
                    <TableCell className={`${getExpiryDateStyle(inspection.expiry_date)} rounded-md px-2 py-1`}>
                      {inspection.expiry_date}
                    </TableCell>
                    <TableCell onClick={(e) => e.stopPropagation()}>
                      <Select
                        onValueChange={(value) => handleRequestAmountChange(value, inspection.inspection_id)}
                        defaultValue={inspection.request_amount.toString()}
                      >
                        <SelectTrigger className="w-[100px]">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          {[0, 1, 2, 3, 4, 5].map((amount) => (
                            <SelectItem key={amount} value={amount.toString()}>
                              {amount}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} className="text-center">No matching results found</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      )}

      <Dialog open={showRequestPopup} onOpenChange={setShowRequestPopup}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Request List Preview</DialogTitle>
            <DialogDescription>
              Review the items to be requested below.
            </DialogDescription>
          </DialogHeader>
          <div 
            ref={dialogContentRef}
            className="grid gap-4 py-4 max-h-[60vh] overflow-y-auto pr-4"
          >
            {requestList.map((item, index) => (
              <div key={item.inspection_id}>
                <div className="grid grid-cols-3 items-center gap-4">
                  <Label htmlFor={`item-${item.inspection_id}`}>{item.item_inspected}</Label>
                  <Input
                    id={`item-${item.inspection_id}`}
                    value={item.request_amount}
                    className="col-span-1"
                    readOnly
                  />
                  <span>{item.unit}</span>
                  <div className="col-span-3">
                    <Label htmlFor={`description-${item.inspection_id}`}>Description</Label>
                    <Textarea
                      id={`description-${item.inspection_id}`}
                      value={item.description}
                      className="mt-1 resize-none bg-transparent"
                      readOnly
                    />
                  </div>
                  <div className="col-span-3 mt-2">
                    <img 
                      src={item.picture_url} 
                      alt={item.item_inspected} 
                      className="w-full h-48 object-cover rounded"
                    />
                  </div>
                </div>
                {index < requestList.length - 1 && <Separator className="my-4" />}
              </div>
            ))}
          </div>
          <DialogFooter>
            <Button onClick={handleSubmitRequest} disabled={isLoading}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Submit Request
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={!!selectedItem} onOpenChange={(open) => {
        if (!open) {
          setSelectedItem(null)
          setEditedItem(null)
          setHasChanges(false)
        }
      }}>
        <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle>Edit Inspection</DialogTitle>
            <DialogDescription>
              Make changes to the inspection details here. Click save when you're done.
            </DialogDescription>
          </DialogHeader>
          {editedItem && (
            <div className="grid gap-4 py-4">
              <div className="flex justify-center mb-4">
                <img 
                  src={editedItem.picture_url}
                  alt={editedItem.item_inspected}
                  className="w-48 h-48 object-cover rounded"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="item_inspected">Item Inspected</Label>
                  <Input
                    id="item_inspected"
                    value={editedItem.item_inspected}
                    onChange={(e) => handleInputChange('item_inspected', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="item_quantity">Item Quantity</Label>
                  <Select
                    value={editedItem.item_quantity.toString()}
                    onValueChange={(value) => handleInputChange('item_quantity', parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select quantity" />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 4, 5, 10, 20, 30, 50].map((quantity) => (
                        <SelectItem key={quantity} value={quantity.toString()}>
                          {quantity}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="unit">Unit</Label>
                  <Select
                    value={editedItem.unit}
                    onValueChange={(value) => handleInputChange('unit', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select unit" />
                    </SelectTrigger>
                    <SelectContent>
                      {units.map((unit) => (
                        <SelectItem key={unit} value={unit}>
                          {unit}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="expiry_date">Expiry Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.expiry_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.expiry_date ? format(new Date(editedItem.expiry_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.expiry_date)}
                        onSelect={(date) => handleDateChange('expiry_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="next_inspection_date">Next Inspection Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.next_inspection_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.next_inspection_date ? format(new Date(editedItem.next_inspection_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.next_inspection_date)}
                        onSelect={(date) => handleDateChange('next_inspection_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="inspected_by">Inspected By</Label>
                  <Select
                    value={editedItem.inspected_by}
                    onValueChange={(value) => handleInputChange('inspected_by', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select inspector" />
                    </SelectTrigger>
                    <SelectContent>
                      {users.map((user) => (
                        <SelectItem key={user} value={user}>
                          {user}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">Status</Label>
                  <Select
                    value={editedItem.status}
                    onValueChange={(value) => handleInputChange('status', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      {statuses.map((status) => (
                        <SelectItem key={status} value={status}>
                          {status}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location">Location</Label>
                  <Select
                    value={editedItem.location}
                    onValueChange={(value) => handleInputChange('location', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select location" />
                    </SelectTrigger>
                    <SelectContent>
                      {locations.map((location) => (
                        <SelectItem key={location} value={location}>
                          {location}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2 col-span-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={editedItem.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    className="resize-none"
                  />
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            {hasChanges ? (
              <>
                <Button onClick={handleSave}>Save changes</Button>
                <Button variant="outline" onClick={() => {
                  setEditedItem(selectedItem)
                  setHasChanges(false)
                }}>
                  Cancel
                </Button>
              </>
            ) : (
              <Button onClick={() => {
                setSelectedItem(null)
                setEditedItem(null)
              }}>
                Close
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}

















=V8=============================================================================================

'use client'

import { useState, useEffect } from 'react'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Loader2, AlertCircle } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { supabase } from './createClient' // Assuming you have a Supabase client setup

type Inspection = {
  inspection_id: number
  picture_url: string
  item_inspected: string
  item_quantity: number
  expiry_date: string
  request_amount: number
  location: string
  inspection_date: string
  inspected_by: string
  kit_condition: string
  next_inspection_date: string
  status: string
  comments: string
}

const initialDummyData: Inspection[] = [
  {
    inspection_id: 1,
    picture_url: "/placeholder.svg?height=50&width=50",
    item_inspected: "First Aid Kit",
    item_quantity: 5,
    expiry_date: "2024-12-31",
    request_amount: 2,
    location: "Main Office",
    inspection_date: "2023-06-01",
    inspected_by: "John Doe",
    kit_condition: "Good",
    next_inspection_date: "2023-12-01",
    status: "Passed",
    comments: "All items present and in good condition"
  },
  {
    inspection_id: 2,
    picture_url: "/placeholder.svg?height=50&width=50",
    item_inspected: "Fire Extinguisher",
    item_quantity: 3,
    expiry_date: "2025-06-30",
    request_amount: 0,
    location: "Workshop",
    inspection_date: "2023-05-15",
    inspected_by: "Jane Smith",
    kit_condition: "Excellent",
    next_inspection_date: "2023-11-15",
    status: "Passed",
    comments: "Pressure gauge in green zone"
  },
  {
    inspection_id: 3,
    picture_url: "/placeholder.svg?height=50&width=50",
    item_inspected: "AED",
    item_quantity: 1,
    expiry_date: "2024-03-31",
    request_amount: 1,
    location: "Reception",
    inspection_date: "2023-06-10",
    inspected_by: "Mike Johnson",
    kit_condition: "Fair",
    next_inspection_date: "2023-09-10",
    status: "Needs Attention",
    comments: "Battery needs replacement soon"
  }
]

export default function FirstAidInspectionPreview() {
  const [inspections, setInspections] = useState<Inspection[]>(initialDummyData)
  const [filteredInspections, setFilteredInspections] = useState<Inspection[]>(initialDummyData)
  const [searchQuery, setSearchQuery] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [editingId, setEditingId] = useState<number | null>(null)
  const [selectedItem, setSelectedItem] = useState<Inspection | null>(null)
  const [editedItem, setEditedItem] = useState<Inspection | null>(null)
  const [hasChanges, setHasChanges] = useState(false)
  const [requestList, setRequestList] = useState<Inspection[]>([])
  const [showRequestPopup, setShowRequestPopup] = useState(false)
  const [warningMessage, setWarningMessage] = useState('')

  useEffect(() => {
    setFilteredInspections(
      inspections.filter((inspection) =>
        Object.values(inspection).some(value =>
          value && value.toString().toLowerCase().includes(searchQuery.toLowerCase())
        )
      )
    )
  }, [searchQuery, inspections])

  const handleRequestAmountChange = (value: string, inspectionId: number) => {
    const updatedInspections = inspections.map(inspection =>
      inspection.inspection_id === inspectionId
        ? { ...inspection, request_amount: parseInt(value) }
        : inspection
    )
    setInspections(updatedInspections)
    setEditingId(null)
  }

  const handleRowClick = (inspection: Inspection) => {
    setSelectedItem(inspection)
    setEditedItem(inspection)
    setHasChanges(false)
  }

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setEditedItem(prev => {
      if (!prev) return null
      const updatedItem = { ...prev, [name]: value }
      setHasChanges(JSON.stringify(updatedItem) !== JSON.stringify(selectedItem))
      return updatedItem
    })
  }

  const handleSave = () => {
    if (editedItem) {
      setInspections(prevInspections =>
        prevInspections.map(inspection =>
          inspection.inspection_id === editedItem.inspection_id ? editedItem : inspection
        )
      )
      setSelectedItem(null)
      setEditedItem(null)
      setHasChanges(false)
    }
  }

  const handlePreviewRequest = () => {
    const requests = inspections.filter(inspection => inspection.request_amount > 0)
    if (requests.length > 0) {
      setRequestList(requests)
      setShowRequestPopup(true)
      setWarningMessage('')
    } else {
      setWarningMessage('Request list is empty. Please add items to the request before previewing.')
      setShowRequestPopup(false)
    }
  }

  const handleSubmitRequest = async () => {
    setIsLoading(true)
    try {
      const { data, error } = await supabase
        .from('requests')
        .insert(requestList)

      if (error) throw error

      console.log('Request successfully submitted:', data)
      setShowRequestPopup(false)
      setRequestList([])
      setInspections(inspections.map(item => ({ ...item, request_amount: 0 })))
      setWarningMessage('Request submitted successfully!')
    } catch (err) {
      console.error('Failed to submit request:', err)
      setWarningMessage('Failed to submit request. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">First Aid Inspection List (Preview)</h1>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Search Inspections</CardTitle>
        </CardHeader>
        <CardContent>
          <Input
            type="text"
            placeholder="Search across all columns..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full"
          />
        </CardContent>
      </Card>

      {warningMessage && (
        <Alert variant={warningMessage.includes('successfully') ? 'default' : 'destructive'} className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Notification</AlertTitle>
          <AlertDescription>{warningMessage}</AlertDescription>
        </Alert>
      )}

      <Button onClick={handlePreviewRequest} className="mb-6">Preview Request List</Button>

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      ) : (
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Inspection ID</TableHead>
                <TableHead>Picture</TableHead>
                <TableHead>Item Inspected</TableHead>
                <TableHead>Item Quantity</TableHead>
                <TableHead>Expiry Date</TableHead>
                <TableHead>Request Amount</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredInspections.length > 0 ? (
                filteredInspections.map((inspection) => (
                  <TableRow
                    key={inspection.inspection_id}
                    className="cursor-pointer hover:bg-muted transition-colors"
                    onClick={() => handleRowClick(inspection)}
                  >
                    <TableCell>{inspection.inspection_id}</TableCell>
                    <TableCell>
                      <img
                        src={inspection.picture_url}
                        alt={inspection.item_inspected}
                        className="w-12 h-12 object-cover rounded"
                      />
                    </TableCell>
                    <TableCell>{inspection.item_inspected}</TableCell>
                    <TableCell>{inspection.item_quantity}</TableCell>
                    <TableCell>{inspection.expiry_date}</TableCell>
                    <TableCell onClick={(e) => e.stopPropagation()}>
                      {editingId === inspection.inspection_id ? (
                        <Select
                          onValueChange={(value) => handleRequestAmountChange(value, inspection.inspection_id)}
                          defaultValue={inspection.request_amount.toString()}
                        >
                          <SelectTrigger className="w-[100px]">
                            <SelectValue placeholder="Select" />
                          </SelectTrigger>
                          <SelectContent>
                            {[0, 1, 2, 3, 4, 5].map((amount) => (
                              <SelectItem key={amount} value={amount.toString()}>
                                {amount}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      ) : (
                        <Button
                          variant="ghost"
                          onClick={(e) => {
                            e.stopPropagation();
                            setEditingId(inspection.inspection_id);
                          }}
                          className="p-0 h-auto font-normal"
                        >
                          {inspection.request_amount}
                        </Button>
                      )}
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={6} className="text-center">No matching results found</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      )}

      <Dialog open={showRequestPopup} onOpenChange={setShowRequestPopup}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Request List Preview</DialogTitle>
            <DialogDescription>
              Review the items to be requested below.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            {requestList.map((item) => (
              <div key={item.inspection_id} className="grid grid-cols-2 items-center gap-4">
                <Label htmlFor={`item-${item.inspection_id}`}>{item.item_inspected}</Label>
                <Input
                  id={`item-${item.inspection_id}`}
                  value={item.request_amount}
                  className="col-span-1"
                  readOnly
                />
              </div>
            ))}
          </div>
          <DialogFooter>
            <Button onClick={handleSubmitRequest} disabled={isLoading}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Submit Request
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={!!selectedItem} onOpenChange={(open) => {
        if (!open) {
          setSelectedItem(null)
          setEditedItem(null)
          setHasChanges(false)
        }
      }}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Edit Inspection</DialogTitle>
            <DialogDescription>
              Make changes to the inspection details here. Click save when youre done.
            </DialogDescription>
          </DialogHeader>
          {editedItem && (
            <div className="grid gap-4 py-4">
              {Object.entries(editedItem).map(([key, value]) => (
                key !== 'inspection_id' && key !== 'picture_url' && (
                  <div key={key} className="grid grid-cols-4 items-center gap-4">
                    <Label htmlFor={key} className="text-right">{key.replace(/_/g, ' ').charAt(0).toUpperCase() + key.replace(/_/g, ' ').slice(1)}:</Label>
                    <Input
                      id={key}
                      name={key}
                      value={value.toString()}
                      onChange={handleInputChange}
                      className="col-span-3"
                    />
                  </div>
                )
              ))}
            </div>
          )}
          <DialogFooter>
            {hasChanges ? (
              <>
                <Button onClick={handleSave}>Save changes</Button>
                <Button variant="outline" onClick={() => {
                  setEditedItem(selectedItem)
                  setHasChanges(false)
                }}>
                  Cancel
                </Button>
              </>
            ) : (
              <Button onClick={() => {
                setSelectedItem(null)
                setEditedItem(null)
              }}>
                Close
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}

































































































































=V10==========================================================================================
'use client'

import { useState, useEffect } from 'react'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Loader2, AlertCircle } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Calendar } from "@/components/ui/calendar"
import { format } from "date-fns"
import { supabase } from './createClient' // Assuming you have a Supabase client setup

type Inspection = {
  inspection_id: number
  picture_url: string
  item_inspected: string
  item_quantity: number
  unit: string
  expiry_date: string
  request_amount: number
  location: string
  inspection_date: string
  inspected_by: string
  kit_condition: string
  next_inspection_date: string
  status: string
  comments: string
}

const initialDummyData: Inspection[] = [
  {
    inspection_id: 1,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "First Aid Kit",
    item_quantity: 5,
    unit: "box",
    expiry_date: "2024-12-31",
    request_amount: 0,
    location: "Main Office",
    inspection_date: "2023-06-01",
    inspected_by: "John Doe",
    kit_condition: "Good",
    next_inspection_date: "2023-12-01",
    status: "Passed",
    comments: "All items present and in good condition"
  },
  {
    inspection_id: 2,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Fire Extinguisher",
    item_quantity: 3,
    unit: "unit",
    expiry_date: "2025-06-30",
    request_amount: 0,
    location: "Workshop",
    inspection_date: "2023-05-15",
    inspected_by: "Jane Smith",
    kit_condition: "Excellent",
    next_inspection_date: "2023-11-15",
    status: "Passed",
    comments: "Pressure gauge in green zone"
  },
  {
    inspection_id: 3,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Antiseptic Solution",
    item_quantity: 2,
    unit: "bottle",
    expiry_date: "2024-03-31",
    request_amount: 0,
    location: "Reception",
    inspection_date: "2023-06-10",
    inspected_by: "Mike Johnson",
    kit_condition: "Fair",
    next_inspection_date: "2023-09-10",
    status: "Needs Attention",
    comments: "One bottle nearly empty"
  }
]

const users = ["John Doe", "Jane Smith", "Mike Johnson"]
const statuses = ["Passed", "Needs Attention", "Failed"]
const locations = ["Main Office", "Workshop", "Reception"]

export default function FirstAidInspectionPreview() {
  const [inspections, setInspections] = useState<Inspection[]>(initialDummyData)
  const [filteredInspections, setFilteredInspections] = useState<Inspection[]>(initialDummyData)
  const [searchQuery, setSearchQuery] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [selectedItem, setSelectedItem] = useState<Inspection | null>(null)
  const [editedItem, setEditedItem] = useState<Inspection | null>(null)
  const [hasChanges, setHasChanges] = useState(false)
  const [requestList, setRequestList] = useState<Inspection[]>([])
  const [showRequestPopup, setShowRequestPopup] = useState(false)
  const [warningMessage, setWarningMessage] = useState('')

  useEffect(() => {
    setFilteredInspections(
      inspections.filter((inspection) =>
        Object.values(inspection).some(value =>
          value && value.toString().toLowerCase().includes(searchQuery.toLowerCase())
        )
      )
    )
  }, [searchQuery, inspections])

  const handleRequestAmountChange = (value: string, inspectionId: number) => {
    const updatedInspections = inspections.map(inspection =>
      inspection.inspection_id === inspectionId
        ? { ...inspection, request_amount: parseInt(value) }
        : inspection
    )
    setInspections(updatedInspections)
  }

  const handleRowClick = (inspection: Inspection) => {
    setSelectedItem(inspection)
    setEditedItem(inspection)
    setHasChanges(false)
  }

  const handleInputChange = (name: string, value: string | number) => {
    setEditedItem(prev => {
      if (!prev) return null
      const updatedItem = { ...prev, [name]: value }
      setHasChanges(JSON.stringify(updatedItem) !== JSON.stringify(selectedItem))
      return updatedItem
    })
  }

  const handleDateChange = (name: string, date: Date | undefined) => {
    if (date) {
      handleInputChange(name, format(date, 'yyyy-MM-dd'))
    }
  }

  const handleSave = () => {
    if (editedItem) {
      setInspections(prevInspections =>
        prevInspections.map(inspection =>
          inspection.inspection_id === editedItem.inspection_id ? editedItem : inspection
        )
      )
      setSelectedItem(null)
      setEditedItem(null)
      setHasChanges(false)
    }
  }

  const handlePreviewRequest = () => {
    const requests = inspections.filter(inspection => inspection.request_amount > 0)
    if (requests.length > 0) {
      setRequestList(requests)
      setShowRequestPopup(true)
      setWarningMessage('')
    } else {
      setWarningMessage('Request list is empty. Please add items to the request before previewing.')
      setShowRequestPopup(false)
    }
  }

  const handleSubmitRequest = async () => {
    setIsLoading(true)
    try {
      const { data, error } = await supabase
        .from('requests')
        .insert(requestList)

      if (error) throw error

      console.log('Request successfully submitted:', data)
      setShowRequestPopup(false)
      setRequestList([])
      setInspections(inspections.map(item => ({ ...item, request_amount: 0 })))
      setWarningMessage('Request submitted successfully!')
    } catch (err) {
      console.error('Failed to submit request:', err)
      setWarningMessage('Failed to submit request. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">First Aid Inspection List (Preview)</h1>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Search Inspections</CardTitle>
        </CardHeader>
        <CardContent>
          <Input
            type="text"
            placeholder="Search across all columns..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full"
          />
        </CardContent>
      </Card>

      {warningMessage && (
        <Alert variant={warningMessage.includes('successfully') ? 'default' : 'destructive'} className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Notification</AlertTitle>
          <AlertDescription>{warningMessage}</AlertDescription>
        </Alert>
      )}

      <Button onClick={handlePreviewRequest} className="mb-6">Preview Request List</Button>

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      ) : (
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Inspection ID</TableHead>
                <TableHead>Picture</TableHead>
                <TableHead>Item Inspected</TableHead>
                <TableHead>Item Quantity</TableHead>
                <TableHead>Unit</TableHead>
                <TableHead>Expiry Date</TableHead>
                <TableHead>Request Amount</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredInspections.length > 0 ? (
                filteredInspections.map((inspection) => (
                  <TableRow
                    key={inspection.inspection_id}
                    className="cursor-pointer hover:bg-muted transition-colors"
                    onClick={() => handleRowClick(inspection)}
                  >
                    <TableCell>{inspection.inspection_id}</TableCell>
                    <TableCell>
                      <img
                        src={inspection.picture_url}
                        alt={inspection.item_inspected}
                        className="w-12 h-12 object-cover rounded"
                      />
                    </TableCell>
                    <TableCell>{inspection.item_inspected}</TableCell>
                    <TableCell>{inspection.item_quantity}</TableCell>
                    <TableCell>{inspection.unit}</TableCell>
                    <TableCell>{inspection.expiry_date}</TableCell>
                    <TableCell onClick={(e) => e.stopPropagation()}>
                      <Select
                        onValueChange={(value) => handleRequestAmountChange(value, inspection.inspection_id)}
                        defaultValue={inspection.request_amount.toString()}
                      >
                        <SelectTrigger className="w-[100px]">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          {[0, 1, 2, 3, 4, 5].map((amount) => (
                            <SelectItem key={amount} value={amount.toString()}>
                              {amount}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} className="text-center">No matching results found</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      )}

      <Dialog open={showRequestPopup} onOpenChange={setShowRequestPopup}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Request List Preview</DialogTitle>
            <DialogDescription>
              Review the items to be requested below.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            {requestList.map((item) => (
              <div key={item.inspection_id} className="grid grid-cols-3 items-center gap-4">
                <Label htmlFor={`item-${item.inspection_id}`}>{item.item_inspected}</Label>
                <Input
                  id={`item-${item.inspection_id}`}
                  value={item.request_amount}
                  className="col-span-1"
                  readOnly
                />
                <span>{item.unit}</span>
              </div>
            ))}
          </div>
          <DialogFooter>
            <Button onClick={handleSubmitRequest} disabled={isLoading}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Submit Request
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={!!selectedItem} onOpenChange={(open) => {
        if (!open) {
          setSelectedItem(null)
          setEditedItem(null)
          setHasChanges(false)
        }
      }}>
        <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle>Edit Inspection</DialogTitle>
            <DialogDescription>
              Make changes to the inspection details here. Click save when you're done.
            </DialogDescription>
          </DialogHeader>
          {editedItem && (
            <div className="grid gap-4 py-4">
              <div className="flex justify-center mb-4">
                <img
                  src={editedItem.picture_url}
                  alt={editedItem.item_inspected}
                  className="w-48 h-48 object-cover rounded"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="item_inspected">Item Inspected</Label>
                  <Input
                    id="item_inspected"
                    value={editedItem.item_inspected}
                    onChange={(e) => handleInputChange('item_inspected', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="item_quantity">Item Quantity</Label>
                  <Select
                    value={editedItem.item_quantity.toString()}
                    onValueChange={(value) => handleInputChange('item_quantity', parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select quantity" />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 4, 5].map((quantity) => (
                        <SelectItem key={quantity} value={quantity.toString()}>
                          {quantity}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="unit">Unit</Label>
                  <Input
                    id="unit"
                    value={editedItem.unit}
                    onChange={(e) => handleInputChange('unit', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="request_amount">Request Amount</Label>
                  <Select
                    value={editedItem.request_amount.toString()}
                    onValueChange={(value) => handleInputChange('request_amount', parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select amount" />
                    </SelectTrigger>
                    <SelectContent>
                      {[0, 1, 2, 3, 4, 5].map((amount) => (
                        <SelectItem key={amount} value={amount.toString()}>
                          {amount}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="expiry_date">Expiry Date</Label>
                  <Calendar
                    mode="single"
                    selected={new Date(editedItem.expiry_date)}
                    onSelect={(date) => handleDateChange('expiry_date', date)}
                    className="rounded-md border"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="next_inspection_date">Next Inspection Date</Label>
                  <Calendar
                    mode="single"
                    selected={new Date(editedItem.next_inspection_date)}
                    onSelect={(date) => handleDateChange('next_inspection_date', date)}
                    className="rounded-md border"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="inspected_by">Inspected By</Label>
                  <Select
                    value={editedItem.inspected_by}
                    onValueChange={(value) => handleInputChange('inspected_by', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select inspector" />
                    </SelectTrigger>
                    <SelectContent>
                      {users.map((user) => (
                        <SelectItem key={user} value={user}>
                          {user}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">Status</Label>
                  <Select
                    value={editedItem.status}
                    onValueChange={(value) => handleInputChange('status', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      {statuses.map((status) => (
                        <SelectItem key={status} value={status}>
                          {status}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location">Location</Label>
                  <Select
                    value={editedItem.location}
                    onValueChange={(value) => handleInputChange('location', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select location" />
                    </SelectTrigger>
                    <SelectContent>
                      {locations.map((location) => (
                        <SelectItem key={location} value={location}>
                          {location}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2 col-span-2">
                  <Label htmlFor="comments">Comments</Label>
                  <Input
                    id="comments"
                    value={editedItem.comments}
                    onChange={(e) => handleInputChange('comments', e.target.value)}
                  />
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            {hasChanges ? (
              <>
                <Button onClick={handleSave}>Save changes</Button>
                <Button variant="outline" onClick={() => {
                  setEditedItem(selectedItem)
                  setHasChanges(false)
                }}>
                  Cancel
                </Button>
              </>
            ) : (
              <Button onClick={() => {
                setSelectedItem(null)
                setEditedItem(null)
              }}>
                Close
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}

=V12======================================================
'use client'

import { useState, useEffect } from 'react'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Loader2, AlertCircle, CalendarIcon } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Calendar } from "@/components/ui/calendar"
import { format, differenceInDays } from "date-fns"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { cn } from "@/lib/utils"
import { supabase } from './createClient' // Assuming you have a Supabase client setup

type Inspection = {
  inspection_id: number
  picture_url: string
  item_inspected: string
  item_quantity: number
  unit: string
  expiry_date: string
  request_amount: number
  location: string
  inspection_date: string
  inspected_by: string
  kit_condition: string
  next_inspection_date: string
  status: string
  description: string
}

const initialDummyData: Inspection[] = [
  {
    inspection_id: 1,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "First Aid Kit",
    item_quantity: 5,
    unit: "box",
    expiry_date: "2024-12-31",
    request_amount: 0,
    location: "Main Office",
    inspection_date: "2023-06-01",
    inspected_by: "John Doe",
    kit_condition: "Good",
    next_inspection_date: "2023-12-01",
    status: "Passed",
    description: "All items present and in good condition"
  },
  {
    inspection_id: 2,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Fire Extinguisher",
    item_quantity: 3,
    unit: "unit",
    expiry_date: "2025-06-30",
    request_amount: 0,
    location: "Workshop",
    inspection_date: "2023-05-15",
    inspected_by: "Jane Smith",
    kit_condition: "Excellent",
    next_inspection_date: "2023-11-15",
    status: "Passed",
    description: "Pressure gauge in green zone"
  },
  {
    inspection_id: 3,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Antiseptic Solution",
    item_quantity: 2,
    unit: "bottle",
    expiry_date: "2023-08-15",
    request_amount: 0,
    location: "Reception",
    inspection_date: "2023-06-10",
    inspected_by: "Mike Johnson",
    kit_condition: "Fair",
    next_inspection_date: "2023-09-10",
    status: "Needs Attention",
    description: "One bottle nearly empty"
  }
]

const users = ["John Doe", "Jane Smith", "Mike Johnson"]
const statuses = ["Passed", "Needs Attention", "Failed"]
const locations = ["Main Office", "Workshop", "Reception"]

export default function FirstAidInspectionPreview() {
  const [inspections, setInspections] = useState<Inspection[]>(initialDummyData)
  const [filteredInspections, setFilteredInspections] = useState<Inspection[]>(initialDummyData)
  const [searchQuery, setSearchQuery] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [selectedItem, setSelectedItem] = useState<Inspection | null>(null)
  const [editedItem, setEditedItem] = useState<Inspection | null>(null)
  const [hasChanges, setHasChanges] = useState(false)
  const [requestList, setRequestList] = useState<Inspection[]>([])
  const [showRequestPopup, setShowRequestPopup] = useState(false)
  const [warningMessage, setWarningMessage] = useState('')

  useEffect(() => {
    setFilteredInspections(
      inspections.filter((inspection) => 
        Object.values(inspection).some(value => 
          value && value.toString().toLowerCase().includes(searchQuery.toLowerCase())
        )
      )
    )
  }, [searchQuery, inspections])

  const handleRequestAmountChange = (value: string, inspectionId: number) => {
    const updatedInspections = inspections.map(inspection => 
      inspection.inspection_id === inspectionId 
        ? { ...inspection, request_amount: parseInt(value) } 
        : inspection
    )
    setInspections(updatedInspections)
  }

  const handleRowClick = (inspection: Inspection) => {
    setSelectedItem(inspection)
    setEditedItem(inspection)
    setHasChanges(false)
  }

  const handleInputChange = (name: string, value: string | number) => {
    setEditedItem(prev => {
      if (!prev) return null
      const updatedItem = { ...prev, [name]: value }
      setHasChanges(JSON.stringify(updatedItem) !== JSON.stringify(selectedItem))
      return updatedItem
    })
  }

  const handleDateChange = (name: string, date: Date | undefined) => {
    if (date) {
      handleInputChange(name, format(date, 'yyyy-MM-dd'))
    }
  }

  const handleSave = () => {
    if (editedItem) {
      setInspections(prevInspections => 
        prevInspections.map(inspection => 
          inspection.inspection_id === editedItem.inspection_id ? editedItem : inspection
        )
      )
      setSelectedItem(null)
      setEditedItem(null)
      setHasChanges(false)
    }
  }

  const handlePreviewRequest = () => {
    const requests = inspections.filter(inspection => inspection.request_amount > 0)
    if (requests.length > 0) {
      setRequestList(requests)
      setShowRequestPopup(true)
      setWarningMessage('')
      console.log('Request List:', requests) // New console.log statement
    } else {
      setWarningMessage('Request list is empty. Please add items to the request before previewing.')
      setShowRequestPopup(false)
    }
  }

  const handleSubmitRequest = async () => {
    setIsLoading(true)
    try {
      const { data, error } = await supabase
        .from('requests')
        .insert(requestList)

      if (error) throw error

      console.log('Request successfully submitted:', data)
      setShowRequestPopup(false)
      setRequestList([])
      setInspections(inspections.map(item => ({ ...item, request_amount: 0 })))
      setWarningMessage('Request submitted successfully!')
    } catch (err) {
      console.error('Failed to submit request:', err)
      setWarningMessage('Failed to submit request. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const getExpiryDateStyle = (expiryDate: string) => {
    const today = new Date()
    const expiry = new Date(expiryDate)
    const daysUntilExpiry = differenceInDays(expiry, today)

    if (daysUntilExpiry < 0) {
      return 'bg-red-500 text-white'
    } else if (daysUntilExpiry <= 90) {
      return 'bg-orange-500 text-white'
    } else {
      return 'bg-green-500 text-black'
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">First Aid Inspection List (Preview)</h1>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Search Inspections</CardTitle>
        </CardHeader>
        <CardContent>
          <Input 
            type="text" 
            placeholder="Search across all columns..." 
            value={searchQuery} 
            onChange={(e) => setSearchQuery(e.target.value)} 
            className="w-full"
          />
        </CardContent>
      </Card>

      {warningMessage && (
        <Alert variant={warningMessage.includes('successfully') ? 'default' : 'destructive'} className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Notification</AlertTitle>
          <AlertDescription>{warningMessage}</AlertDescription>
        </Alert>
      )}

      <Button onClick={handlePreviewRequest} className="mb-6">Preview Request List</Button>

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      ) : (
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Item ID</TableHead>
                <TableHead>Picture</TableHead>
                <TableHead>Item Inspected</TableHead>
                <TableHead>Item Quantity</TableHead>
                <TableHead>Unit</TableHead>
                <TableHead>Expiry Date</TableHead>
                <TableHead>Request Amount</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredInspections.length > 0 ? (
                filteredInspections.map((inspection) => (
                  <TableRow 
                    key={inspection.inspection_id}
                    className="cursor-pointer hover:bg-muted transition-colors"
                    onClick={() => handleRowClick(inspection)}
                  >
                    <TableCell>{inspection.inspection_id}</TableCell>
                    <TableCell>
                      <img 
                        src={inspection.picture_url} 
                        alt={inspection.item_inspected} 
                        className="w-12 h-12 object-cover rounded"
                      />
                    </TableCell>
                    <TableCell>{inspection.item_inspected}</TableCell>
                    <TableCell>{inspection.item_quantity}</TableCell>
                    <TableCell>{inspection.unit}</TableCell>
                    <TableCell className={`${getExpiryDateStyle(inspection.expiry_date)} rounded-md px-2 py-1`}>
                      {inspection.expiry_date}
                    </TableCell>
                    <TableCell onClick={(e) => e.stopPropagation()}>
                      <Select
                        onValueChange={(value) => handleRequestAmountChange(value, inspection.inspection_id)}
                        defaultValue={inspection.request_amount.toString()}
                      >
                        <SelectTrigger className="w-[100px]">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          {[0, 1, 2, 3, 4, 5].map((amount) => (
                            <SelectItem key={amount} value={amount.toString()}>
                              {amount}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} className="text-center">No matching results found</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      )}

      <Dialog open={showRequestPopup} onOpenChange={setShowRequestPopup}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Request List Preview</DialogTitle>
            <DialogDescription>
              Review the items to be requested below.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            {requestList.map((item) => (
              <div key={item.inspection_id} className="grid grid-cols-3 items-center gap-4">
                <Label htmlFor={`item-${item.inspection_id}`}>{item.item_inspected}</Label>
                <Input
                  id={`item-${item.inspection_id}`}
                  value={item.request_amount}
                  className="col-span-1"
                  readOnly
                />
                <span>{item.unit}</span>
                <div className="col-span-3">
                  <Label htmlFor={`description-${item.inspection_id}`}>Description</Label>
                  <Input
                    id={`description-${item.inspection_id}`}
                    value={item.description}
                    className="mt-1"
                    readOnly
                  />
                </div>
              </div>
            ))}
          </div>
          <DialogFooter>
            <Button onClick={handleSubmitRequest} disabled={isLoading}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Submit Request
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={!!selectedItem} onOpenChange={(open) => {
        if (!open) {
          setSelectedItem(null)
          setEditedItem(null)
          setHasChanges(false)
        }
      }}>
        <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle>Edit Inspection</DialogTitle>
            <DialogDescription>
              Make changes to the inspection details here. Click save when you're done.
            </DialogDescription>
          </DialogHeader>
          {editedItem && (
            <div className="grid gap-4 py-4">
              <div className="flex justify-center mb-4">
                <img 
                  src={editedItem.picture_url} 
                  alt={editedItem.item_inspected} 
                  className="w-48 h-48 object-cover rounded"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="item_inspected">Item Inspected</Label>
                  <Input
                    id="item_inspected"
                    value={editedItem.item_inspected}
                    onChange={(e) => handleInputChange('item_inspected', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="item_quantity">Item Quantity</Label>
                  <Select
                    value={editedItem.item_quantity.toString()}
                    onValueChange={(value) => handleInputChange('item_quantity', parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select quantity" />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 4, 5].map((quantity) => (
                        <SelectItem key={quantity} value={quantity.toString()}>
                          {quantity}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="unit">Unit</Label>
                  <Input
                    id="unit"
                    value={editedItem.unit}
                    onChange={(e) => handleInputChange('unit', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="expiry_date">Expiry Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.expiry_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.expiry_date ? format(new Date(editedItem.expiry_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.expiry_date)}
                        onSelect={(date) => handleDateChange('expiry_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="next_inspection_date">Next Inspection Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.next_inspection_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.next_inspection_date ? format(new Date(editedItem.next_inspection_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.next_inspection_date)}
                        onSelect={(date) => handleDateChange('next_inspection_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="inspected_by">Inspected By</Label>
                  <Select
                    value={editedItem.inspected_by}
                    onValueChange={(value) => handleInputChange('inspected_by', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select inspector" />
                    </SelectTrigger>
                    <SelectContent>
                      {users.map((user) => (
                        <SelectItem key={user} value={user}>
                          {user}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">Status</Label>
                  <Select
                    value={editedItem.status}
                    onValueChange={(value) => handleInputChange('status', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      {statuses.map((status) => (
                        <SelectItem key={status} value={status}>
                          {status}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location">Location</Label>
                  <Select
                    value={editedItem.location}
                    onValueChange={(value) => handleInputChange('location', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select location" />
                    </SelectTrigger>
                    <SelectContent>
                      {locations.map((location) => (
                        <SelectItem key={location} value={location}>
                          {location}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2 col-span-2">
                  <Label htmlFor="description">Description</Label>
                  <Input
                    id="description"
                    value={editedItem.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                  />
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            {hasChanges ? (
              <>
                <Button onClick={handleSave}>Save changes</Button>
                <Button variant="outline" onClick={() => {
                  setEditedItem(selectedItem)
                  setHasChanges(false)
                }}>
                  Cancel
                </Button>
              </>
            ) : (
              <Button onClick={() => {
                setSelectedItem(null)
                setEditedItem(null)
              }}>
                Close
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}











































































































































































































































































































































































































































































=V14===========================================================

'use client'

import { useState, useEffect } from 'react'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Loader2, AlertCircle, CalendarIcon } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Calendar } from "@/components/ui/calendar"
import { format, differenceInDays } from "date-fns"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { cn } from "@/lib/utils"
import { Separator } from "@/components/ui/separator"
import { Textarea } from "@/components/ui/textarea"
import { supabase } from './createClient' // Assuming you have a Supabase client setup

type Inspection = {
  inspection_id: number
  picture_url: string
  item_inspected: string
  item_quantity: number
  unit: string
  expiry_date: string
  request_amount: number
  location: string
  inspection_date: string
  inspected_by: string
  kit_condition: string
  next_inspection_date: string
  status: string
  description: string
}

const initialDummyData: Inspection[] = [
  {
    inspection_id: 1,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "First Aid Kit",
    item_quantity: 5,
    unit: "box",
    expiry_date: "2024-12-31",
    request_amount: 0,
    location: "Main Office",
    inspection_date: "2023-06-01",
    inspected_by: "John Doe",
    kit_condition: "Good",
    next_inspection_date: "2023-12-01",
    status: "Passed",
    description: "All items present and in good condition"
  },
  {
    inspection_id: 2,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Fire Extinguisher",
    item_quantity: 3,
    unit: "unit",
    expiry_date: "2025-06-30",
    request_amount: 0,
    location: "Workshop",
    inspection_date: "2023-05-15",
    inspected_by: "Jane Smith",
    kit_condition: "Excellent",
    next_inspection_date: "2023-11-15",
    status: "Passed",
    description: "Pressure gauge in green zone"
  },
  {
    inspection_id: 3,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Antiseptic Solution",
    item_quantity: 2,
    unit: "bottle",
    expiry_date: "2023-08-15",
    request_amount: 0,
    location: "Reception",
    inspection_date: "2023-06-10",
    inspected_by: "Mike Johnson",
    kit_condition: "Fair",
    next_inspection_date: "2023-09-10",
    status: "Needs Attention",
    description: "One bottle nearly empty"
  }
]

const users = ["John Doe", "Jane Smith", "Mike Johnson"]
const statuses = ["Passed", "Needs Attention", "Failed"]
const locations = ["Main Office", "Workshop", "Reception"]
const units = ["box", "bottle", "set", "unit", "pack"]

export default function FirstAidInspectionPreview() {
  const [inspections, setInspections] = useState<Inspection[]>(initialDummyData)
  const [filteredInspections, setFilteredInspections] = useState<Inspection[]>(initialDummyData)
  const [searchQuery, setSearchQuery] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [selectedItem, setSelectedItem] = useState<Inspection | null>(null)
  const [editedItem, setEditedItem] = useState<Inspection | null>(null)
  const [hasChanges, setHasChanges] = useState(false)
  const [requestList, setRequestList] = useState<Inspection[]>([])
  const [showRequestPopup, setShowRequestPopup] = useState(false)
  const [warningMessage, setWarningMessage] = useState('')

  useEffect(() => {
    setFilteredInspections(
      inspections.filter((inspection) => 
        Object.values(inspection).some(value => 
          value && value.toString().toLowerCase().includes(searchQuery.toLowerCase())
        )
      )
    )
  }, [searchQuery, inspections])

  const handleRequestAmountChange = (value: string, inspectionId: number) => {
    const updatedInspections = inspections.map(inspection => 
      inspection.inspection_id === inspectionId 
        ? { ...inspection, request_amount: parseInt(value) } 
        : inspection
    )
    setInspections(updatedInspections)
  }

  const handleRowClick = (inspection: Inspection) => {
    setSelectedItem(inspection)
    setEditedItem(inspection)
    setHasChanges(false)
  }

  const handleInputChange = (name: string, value: string | number) => {
    setEditedItem(prev => {
      if (!prev) return null
      const updatedItem = { ...prev, [name]: value }
      setHasChanges(JSON.stringify(updatedItem) !== JSON.stringify(selectedItem))
      return updatedItem
    })
  }

  const handleDateChange = (name: string, date: Date | undefined) => {
    if (date) {
      handleInputChange(name, format(date, 'yyyy-MM-dd'))
    }
  }

  const handleSave = () => {
    if (editedItem) {
      setInspections(prevInspections => 
        prevInspections.map(inspection => 
          inspection.inspection_id === editedItem.inspection_id ? editedItem : inspection
        )
      )
      setSelectedItem(null)
      setEditedItem(null)
      setHasChanges(false)
    }
  }

  const handlePreviewRequest = () => {
    const requests = inspections.filter(inspection => inspection.request_amount > 0)
    if (requests.length > 0) {
      setRequestList(requests)
      setShowRequestPopup(true)
      setWarningMessage('')
      console.log('Request List:', requests)
    } else {
      setWarningMessage('Request list is empty. Please add items to the request before previewing.')
      setShowRequestPopup(false)
    }
  }

  const handleSubmitRequest = async () => {
    setIsLoading(true)
    try {
      const { data, error } = await supabase
        .from('requests')
        .insert(requestList)

      if (error) throw error

      console.log('Request successfully submitted:', data)
      setShowRequestPopup(false)
      setRequestList([])
      setInspections(inspections.map(item => ({ ...item, request_amount: 0 })))
      setWarningMessage('Request submitted successfully!')
    } catch (err) {
      console.error('Failed to submit request:', err)
      setWarningMessage('Failed to submit request. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const getExpiryDateStyle = (expiryDate: string) => {
    const today = new Date()
    const expiry = new Date(expiryDate)
    const daysUntilExpiry = differenceInDays(expiry, today)

    if (daysUntilExpiry < 0) {
      return 'bg-red-500 text-white'
    } else if (daysUntilExpiry <= 90) {
      return 'bg-orange-500 text-white'
    } else {
      return 'bg-green-500 text-black'
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">First Aid Inspection List (Preview)</h1>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Search Inspections</CardTitle>
        </CardHeader>
        <CardContent>
          <Input 
            type="text" 
            placeholder="Search across all columns..." 
            value={searchQuery} 
            onChange={(e) => setSearchQuery(e.target.value)} 
            className="w-full"
          />
        </CardContent>
      </Card>

      {warningMessage && (
        <Alert variant={warningMessage.includes('successfully') ? 'default' : 'destructive'} className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Notification</AlertTitle>
          <AlertDescription>{warningMessage}</AlertDescription>
        </Alert>
      )}

      <div className="flex justify-end mb-6">
        <Button onClick={handlePreviewRequest}>Preview Request List</Button>
      </div>

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      ) : (
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Item ID</TableHead>
                <TableHead>Picture</TableHead>
                <TableHead>Item Inspected</TableHead>
                <TableHead>Item Quantity</TableHead>
                <TableHead>Unit</TableHead>
                <TableHead>Expiry Date</TableHead>
                <TableHead>Request Amount</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredInspections.length > 0 ? (
                filteredInspections.map((inspection) => (
                  <TableRow 
                    key={inspection.inspection_id}
                    className="cursor-pointer hover:bg-muted transition-colors"
                    onClick={() => handleRowClick(inspection)}
                  >
                    <TableCell>{inspection.inspection_id}</TableCell>
                    <TableCell>
                      <img 
                        src={inspection.picture_url} 
                        alt={inspection.item_inspected} 
                        className="w-12 h-12 object-cover rounded"
                      />
                    </TableCell>
                    <TableCell>{inspection.item_inspected}</TableCell>
                    <TableCell>{inspection.item_quantity}</TableCell>
                    <TableCell>{inspection.unit}</TableCell>
                    <TableCell className={`${getExpiryDateStyle(inspection.expiry_date)} rounded-md px-2 py-1`}>
                      {inspection.expiry_date}
                    </TableCell>
                    <TableCell onClick={(e) => e.stopPropagation()}>
                      <Select
                        onValueChange={(value) => handleRequestAmountChange(value, inspection.inspection_id)}
                        defaultValue={inspection.request_amount.toString()}
                      >
                        <SelectTrigger className="w-[100px]">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          {[0, 1, 2, 3, 4, 5].map((amount) => (
                            <SelectItem key={amount} value={amount.toString()}>
                              {amount}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} className="text-center">No matching results found</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      )}

      <Dialog open={showRequestPopup} onOpenChange={setShowRequestPopup}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Request List Preview</DialogTitle>
            <DialogDescription>
              Review the items to be requested below.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            {requestList.map((item, index) => (
              <div key={item.inspection_id}>
                <div className="grid grid-cols-3 items-center gap-4">
                  <Label htmlFor={`item-${item.inspection_id}`}>{item.item_inspected}</Label>
                  <Input
                    id={`item-${item.inspection_id}`}
                    value={item.request_amount}
                    className="col-span-1"
                    readOnly
                  />
                  <span>{item.unit}</span>
                  <div className="col-span-3">
                    <Label htmlFor={`description-${item.inspection_id}`}>Description</Label>
                    <Textarea
                      id={`description-${item.inspection_id}`}
                      value={item.description}
                      className="mt-1 resize-none bg-transparent"
                      readOnly
                    />
                  </div>
                </div>
                {index < requestList.length - 1 && <Separator className="my-4" />}
              </div>
            ))}
          </div>
          <DialogFooter>
            <Button onClick={handleSubmitRequest} disabled={isLoading}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Submit Request
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={!!selectedItem} onOpenChange={(open) => {
        if (!open) {
          setSelectedItem(null)
          setEditedItem(null)
          setHasChanges(false)
        }
      }}>
        <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle>Edit Inspection</DialogTitle>
            <DialogDescription>
              Make changes to the inspection details here. Click save when you're done.
            </DialogDescription>
          </DialogHeader>
          {editedItem && (
            <div className="grid gap-4 py-4">
              <div className="flex justify-center mb-4">
                <img 
                  src={editedItem.picture_url} 
                  alt={editedItem.item_inspected}
                  className="w-48 h-48 object-cover rounded"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="item_inspected">Item Inspected</Label>
                  <Input
                    id="item_inspected"
                    value={editedItem.item_inspected}
                    onChange={(e) => handleInputChange('item_inspected', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="item_quantity">Item Quantity</Label>
                  <Select
                    value={editedItem.item_quantity.toString()}
                    onValueChange={(value) => handleInputChange('item_quantity', parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select quantity" />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 4, 5].map((quantity) => (
                        <SelectItem key={quantity} value={quantity.toString()}>
                          {quantity}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="unit">Unit</Label>
                  <Select
                    value={editedItem.unit}
                    onValueChange={(value) => handleInputChange('unit', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select unit" />
                    </SelectTrigger>
                    <SelectContent>
                      {units.map((unit) => (
                        <SelectItem key={unit} value={unit}>
                          {unit}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="expiry_date">Expiry Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.expiry_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.expiry_date ? format(new Date(editedItem.expiry_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.expiry_date)}
                        onSelect={(date) => handleDateChange('expiry_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="next_inspection_date">Next Inspection Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.next_inspection_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.next_inspection_date ? format(new Date(editedItem.next_inspection_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.next_inspection_date)}
                        onSelect={(date) => handleDateChange('next_inspection_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="inspected_by">Inspected By</Label>
                  <Select
                    value={editedItem.inspected_by}
                    onValueChange={(value) => handleInputChange('inspected_by', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select inspector" />
                    </SelectTrigger>
                    <SelectContent>
                      {users.map((user) => (
                        <SelectItem key={user} value={user}>
                          {user}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">Status</Label>
                  <Select
                    value={editedItem.status}
                    onValueChange={(value) => handleInputChange('status', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      {statuses.map((status) => (
                        <SelectItem key={status} value={status}>
                          {status}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location">Location</Label>
                  <Select
                    value={editedItem.location}
                    onValueChange={(value) => handleInputChange('location', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select location" />
                    </SelectTrigger>
                    <SelectContent>
                      {locations.map((location) => (
                        <SelectItem key={location} value={location}>
                          {location}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2 col-span-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={editedItem.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    className="resize-none"
                  />
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            {hasChanges ? (
              <>
                <Button onClick={handleSave}>Save changes</Button>
                <Button variant="outline" onClick={() => {
                  setEditedItem(selectedItem)
                  setHasChanges(false)
                }}>
                  Cancel
                </Button>
              </>
            ) : (
              <Button onClick={() => {
                setSelectedItem(null)
                setEditedItem(null)
              }}>
                Close
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}























































































































































































































































































































































































































































=V14=====================================
npx shadcn@latest add "https://v0.dev/chat/b/b_1iiN2pDdqWi?token=eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..rzlCi9S34k_caEME.zyRN-DxDnY5ZnoDhmek-wIDLNiyjaAWUA_xdZN6Ztgpf5VAnvNyKXvblGr4.ePJkpTn_poh5ZJEoG3fVbA"
=V14=====================================


'use client'

import { useState, useEffect } from 'react'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Loader2, AlertCircle, CalendarIcon } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Calendar } from "@/components/ui/calendar"
import { format, differenceInDays } from "date-fns"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { cn } from "@/lib/utils"
import { Separator } from "@/components/ui/separator"
import { Textarea } from "@/components/ui/textarea"
import { supabase } from './createClient' // Assuming you have a Supabase client setup

type Inspection = {
  inspection_id: number
  picture_url: string
  item_inspected: string
  item_quantity: number
  unit: string
  expiry_date: string
  request_amount: number
  location: string
  inspection_date: string
  inspected_by: string
  kit_condition: string
  next_inspection_date: string
  status: string
  description: string
}

const initialDummyData: Inspection[] = [
  {
    inspection_id: 1,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "First Aid Kit",
    item_quantity: 5,
    unit: "box",
    expiry_date: "2024-12-31",
    request_amount: 0,
    location: "Main Office",
    inspection_date: "2023-06-01",
    inspected_by: "John Doe",
    kit_condition: "Good",
    next_inspection_date: "2023-12-01",
    status: "Passed",
    description: "All items present and in good condition"
  },
  {
    inspection_id: 2,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Fire Extinguisher",
    item_quantity: 3,
    unit: "unit",
    expiry_date: "2025-06-30",
    request_amount: 0,
    location: "Workshop",
    inspection_date: "2023-05-15",
    inspected_by: "Jane Smith",
    kit_condition: "Excellent",
    next_inspection_date: "2023-11-15",
    status: "Passed",
    description: "Pressure gauge in green zone"
  },
  {
    inspection_id: 3,
    picture_url: "/placeholder.svg?height=200&width=200",
    item_inspected: "Antiseptic Solution",
    item_quantity: 2,
    unit: "bottle",
    expiry_date: "2023-08-15",
    request_amount: 0,
    location: "Reception",
    inspection_date: "2023-06-10",
    inspected_by: "Mike Johnson",
    kit_condition: "Fair",
    next_inspection_date: "2023-09-10",
    status: "Needs Attention",
    description: "One bottle nearly empty"
  }
]

const users = ["John Doe", "Jane Smith", "Mike Johnson"]
const statuses = ["Passed", "Needs Attention", "Failed"]
const locations = ["Main Office", "Workshop", "Reception"]
const units = ["box", "bottle", "set", "unit", "pack"]

export function FirstAidInspectionPreviewComponent() {
  const [inspections, setInspections] = useState<Inspection[]>(initialDummyData)
  const [filteredInspections, setFilteredInspections] = useState<Inspection[]>(initialDummyData)
  const [searchQuery, setSearchQuery] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [selectedItem, setSelectedItem] = useState<Inspection | null>(null)
  const [editedItem, setEditedItem] = useState<Inspection | null>(null)
  const [hasChanges, setHasChanges] = useState(false)
  const [requestList, setRequestList] = useState<Inspection[]>([])
  const [showRequestPopup, setShowRequestPopup] = useState(false)
  const [warningMessage, setWarningMessage] = useState('')

  useEffect(() => {
    setFilteredInspections(
      inspections.filter((inspection) => 
        Object.values(inspection).some(value => 
          value && value.toString().toLowerCase().includes(searchQuery.toLowerCase())
        )
      )
    )
  }, [searchQuery, inspections])

  const handleRequestAmountChange = (value: string, inspectionId: number) => {
    const updatedInspections = inspections.map(inspection => 
      inspection.inspection_id === inspectionId 
        ? { ...inspection, request_amount: parseInt(value) } 
        : inspection
    )
    setInspections(updatedInspections)
  }

  const handleRowClick = (inspection: Inspection) => {
    setSelectedItem(inspection)
    setEditedItem(inspection)
    setHasChanges(false)
  }

  const handleInputChange = (name: string, value: string | number) => {
    setEditedItem(prev => {
      if (!prev) return null
      const updatedItem = { ...prev, [name]: value }
      setHasChanges(JSON.stringify(updatedItem) !== JSON.stringify(selectedItem))
      return updatedItem
    })
  }

  const handleDateChange = (name: string, date: Date | undefined) => {
    if (date) {
      handleInputChange(name, format(date, 'yyyy-MM-dd'))
    }
  }

  const handleSave = () => {
    if (editedItem) {
      setInspections(prevInspections => 
        prevInspections.map(inspection => 
          inspection.inspection_id === editedItem.inspection_id ? editedItem : inspection
        )
      )
      setSelectedItem(null)
      setEditedItem(null)
      setHasChanges(false)
    }
  }

  const handlePreviewRequest = () => {
    const requests = inspections.filter(inspection => inspection.request_amount > 0)
    if (requests.length > 0) {
      setRequestList(requests)
      setShowRequestPopup(true)
      setWarningMessage('')
      console.log('Request List:', requests)
    } else {
      setWarningMessage('Request list is empty. Please add items to the request before previewing.')
      setShowRequestPopup(false)
    }
  }

  const handleSubmitRequest = async () => {
    setIsLoading(true)
    try {
      const { data, error } = await supabase
        .from('requests')
        .insert(requestList)

      if (error) throw error

      console.log('Request successfully submitted:', data)
      setShowRequestPopup(false)
      setRequestList([])
      setInspections(inspections.map(item => ({ ...item, request_amount: 0 })))
      setWarningMessage('Request submitted successfully!')
    } catch (err) {
      console.error('Failed to submit request:', err)
      setWarningMessage('Failed to submit request. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const getExpiryDateStyle = (expiryDate: string) => {
    const today = new Date()
    const expiry = new Date(expiryDate)
    const daysUntilExpiry = differenceInDays(expiry, today)

    if (daysUntilExpiry < 0) {
      return 'bg-red-500 text-white'
    } else if (daysUntilExpiry <= 90) {
      return 'bg-orange-500 text-white'
    } else {
      return 'bg-green-500 text-black'
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">First Aid Inspection List (Preview)</h1>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Search Inspections</CardTitle>
        </CardHeader>
        <CardContent>
          <Input 
            type="text" 
            placeholder="Search across all columns..." 
            value={searchQuery} 
            onChange={(e) => setSearchQuery(e.target.value)} 
            className="w-full"
          />
        </CardContent>
      </Card>

      {warningMessage && (
        <Alert variant={warningMessage.includes('successfully') ? 'default' : 'destructive'} className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Notification</AlertTitle>
          <AlertDescription>{warningMessage}</AlertDescription>
        </Alert>
      )}

      <div className="flex justify-end mb-6">
        <Button onClick={handlePreviewRequest}>Preview Request List</Button>
      </div>

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      ) : (
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Item ID</TableHead>
                <TableHead>Picture</TableHead>
                <TableHead>Item Inspected</TableHead>
                <TableHead>Item Quantity</TableHead>
                <TableHead>Unit</TableHead>
                <TableHead>Expiry Date</TableHead>
                <TableHead>Request Amount</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredInspections.length > 0 ? (
                filteredInspections.map((inspection) => (
                  <TableRow 
                    key={inspection.inspection_id}
                    className="cursor-pointer hover:bg-muted transition-colors"
                    onClick={() => handleRowClick(inspection)}
                  >
                    <TableCell>{inspection.inspection_id}</TableCell>
                    <TableCell>
                      <img 
                        src={inspection.picture_url} 
                        alt={inspection.item_inspected} 
                        className="w-12 h-12 object-cover rounded"
                      />
                    </TableCell>
                    <TableCell>{inspection.item_inspected}</TableCell>
                    <TableCell>{inspection.item_quantity}</TableCell>
                    <TableCell>{inspection.unit}</TableCell>
                    <TableCell className={`${getExpiryDateStyle(inspection.expiry_date)} rounded-md px-2 py-1`}>
                      {inspection.expiry_date}
                    </TableCell>
                    <TableCell onClick={(e) => e.stopPropagation()}>
                      <Select
                        onValueChange={(value) => handleRequestAmountChange(value, inspection.inspection_id)}
                        defaultValue={inspection.request_amount.toString()}
                      >
                        <SelectTrigger className="w-[100px]">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          {[0, 1, 2, 3, 4, 5].map((amount) => (
                            <SelectItem key={amount} value={amount.toString()}>
                              {amount}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} className="text-center">No matching results found</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      )}

      <Dialog open={showRequestPopup} onOpenChange={setShowRequestPopup}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Request List Preview</DialogTitle>
            <DialogDescription>
              Review the items to be requested below.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            {requestList.map((item, index) => (
              <div key={item.inspection_id}>
                <div className="grid grid-cols-3 items-center gap-4">
                  <Label htmlFor={`item-${item.inspection_id}`}>{item.item_inspected}</Label>
                  <Input
                    id={`item-${item.inspection_id}`}
                    value={item.request_amount}
                    className="col-span-1"
                    readOnly
                  />
                  <span>{item.unit}</span>
                  <div className="col-span-3">
                    <Label htmlFor={`description-${item.inspection_id}`}>Description</Label>
                    <Textarea
                      id={`description-${item.inspection_id}`}
                      value={item.description}
                      className="mt-1 resize-none bg-transparent"
                      readOnly
                    />
                  </div>
                </div>
                {index < requestList.length - 1 && <Separator className="my-4" />}
              </div>
            ))}
          </div>
          <DialogFooter>
            <Button onClick={handleSubmitRequest} disabled={isLoading}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Submit Request
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={!!selectedItem} onOpenChange={(open) => {
        if (!open) {
          setSelectedItem(null)
          setEditedItem(null)
          setHasChanges(false)
        }
      }}>
        <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle>Edit Inspection</DialogTitle>
            <DialogDescription>
              Make changes to the inspection details here. Click save when you're done.
            </DialogDescription>
          </DialogHeader>
          {editedItem && (
            <div className="grid gap-4 py-4">
              <div className="flex justify-center mb-4">
                <img 
                  src={editedItem.picture_url} 
                  alt={editedItem.item_inspected}
                  className="w-48 h-48 object-cover rounded"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="item_inspected">Item Inspected</Label>
                  <Input
                    id="item_inspected"
                    value={editedItem.item_inspected}
                    onChange={(e) => handleInputChange('item_inspected', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="item_quantity">Item Quantity</Label>
                  <Select
                    value={editedItem.item_quantity.toString()}
                    onValueChange={(value) => handleInputChange('item_quantity', parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select quantity" />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 4, 5].map((quantity) => (
                        <SelectItem key={quantity} value={quantity.toString()}>
                          {quantity}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="unit">Unit</Label>
                  <Select
                    value={editedItem.unit}
                    onValueChange={(value) => handleInputChange('unit', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select unit" />
                    </SelectTrigger>
                    <SelectContent>
                      {units.map((unit) => (
                        <SelectItem key={unit} value={unit}>
                          {unit}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="expiry_date">Expiry Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.expiry_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.expiry_date ? format(new Date(editedItem.expiry_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.expiry_date)}
                        onSelect={(date) => handleDateChange('expiry_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="next_inspection_date">Next Inspection Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !editedItem.next_inspection_date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {editedItem.next_inspection_date ? format(new Date(editedItem.next_inspection_date), "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={new Date(editedItem.next_inspection_date)}
                        onSelect={(date) => handleDateChange('next_inspection_date', date)}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="inspected_by">Inspected By</Label>
                  <Select
                    value={editedItem.inspected_by}
                    onValueChange={(value) => handleInputChange('inspected_by', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select inspector" />
                    </SelectTrigger>
                    <SelectContent>
                      {users.map((user) => (
                        <SelectItem key={user} value={user}>
                          {user}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">Status</Label>
                  <Select
                    value={editedItem.status}
                    onValueChange={(value) => handleInputChange('status', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      {statuses.map((status) => (
                        <SelectItem key={status} value={status}>
                          {status}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location">Location</Label>
                  <Select
                    value={editedItem.location}
                    onValueChange={(value) => handleInputChange('location', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select location" />
                    </SelectTrigger>
                    <SelectContent>
                      {locations.map((location) => (
                        <SelectItem key={location} value={location}>
                          {location}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2 col-span-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={editedItem.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    className="resize-none"
                  />
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            {hasChanges ? (
              <>
                <Button onClick={handleSave}>Save changes</Button>
                <Button variant="outline" onClick={() => {
                  setEditedItem(selectedItem)
                  setHasChanges(false)
                }}>
                  Cancel
                </Button>
              </>
            ) : (
              <Button onClick={() => {
                setSelectedItem(null)
                setEditedItem(null)
              }}>
                Close
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}